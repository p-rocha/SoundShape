document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
?par
par()
par(no.readonly = TRUE)
?on.exit()
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
?tuneR::writeWave
tuneR::writeWave
?file()
?close
?tempdir
tempfile(c("ab", "a b c"))   # give file name with spaces in!
library(SoundShape)
library(seewave)
library(tuneR)
# Set working directory
setwd("C:/R/The Shape of Sound - MEE/Workflow sample")
wav.at <- base::tempdir("example SoundShape")
wav.at
store.at <- base:tempdir("output")
store.at <- base::tempdir("output")
# cuvieri
cut.cuv1 <- seewave::cutw(cuvieri, f=44100, from=0.05, to=0.45, output = "Wave")
cut.cuv2 <- seewave::cutw(cuvieri, f=44100, from=0.73, to=1.13, output = "Wave")
cut.cuv3 <- seewave::cutw(cuvieri, f=44100, from=1.47, to=1.87, output = "Wave")
# centralis
cut.cent1 <- seewave::cutw(centralis, f=44100, from=0.0, to=0.8, output = "Wave")
cut.cent2 <- seewave::cutw(centralis, f=44100, from=1.08, to=1.78, output = "Wave")
cut.cent3 <- seewave::cutw(centralis, f=44100, from=2.1, to=2.8, output = "Wave")
# kroyeri
cut.kro1 <- seewave::cutw(kroyeri, f=44100, from=0.16, to=0.96, output = "Wave")
cut.kro2 <- seewave::cutw(kroyeri, f=44100, from=1.55, to=2.35, output = "Wave")
cut.kro3 <- seewave::cutw(kroyeri, f=44100, from=2.9, to=3.8, output = "Wave")
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv2, filename = file.path(wav.at, "cut.cuv2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv3, filename = file.path(wav.at, "cut.cuv3.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent1, filename = file.path(wav.at, "cut.cent1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent2, filename = file.path(wav.at, "cut.cent2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent3, filename = file.path(wav.at, "cut.cent3.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro1, filename = file.path(wav.at, "cut.kro1.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro2, filename = file.path(wav.at, "cut.kro2.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro3, filename = file.path(wav.at, "cut.kro3.wav"), extensible = FALSE)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
# Verify alignment using analysis.type = "twoDshape"
eigensound(analysis.type = "twoDshape", wav.at = file.path(wav.at, "Aligned"), dBlevel = 25, store.at=store.at, plot.exp=TRUE, flim=c(0, 4), tlim=c(0, 0.8), add.contour = T)
file.path(wav.at, "Aligned")
wav.at <- base::tempdir("example SoundShape")
store.at <- base::tempdir("output")
# cuvieri
cut.cuv1 <- seewave::cutw(cuvieri, f=44100, from=0.05, to=0.45, output = "Wave")
cut.cuv2 <- seewave::cutw(cuvieri, f=44100, from=0.73, to=1.13, output = "Wave")
cut.cuv3 <- seewave::cutw(cuvieri, f=44100, from=1.47, to=1.87, output = "Wave")
# centralis
cut.cent1 <- seewave::cutw(centralis, f=44100, from=0.0, to=0.8, output = "Wave")
cut.cent2 <- seewave::cutw(centralis, f=44100, from=1.08, to=1.78, output = "Wave")
cut.cent3 <- seewave::cutw(centralis, f=44100, from=2.1, to=2.8, output = "Wave")
# kroyeri
cut.kro1 <- seewave::cutw(kroyeri, f=44100, from=0.16, to=0.96, output = "Wave")
cut.kro2 <- seewave::cutw(kroyeri, f=44100, from=1.55, to=2.35, output = "Wave")
cut.kro3 <- seewave::cutw(kroyeri, f=44100, from=2.9, to=3.8, output = "Wave")
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv2, filename = file.path(wav.at, "cut.cuv2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv3, filename = file.path(wav.at, "cut.cuv3.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent1, filename = file.path(wav.at, "cut.cent1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent2, filename = file.path(wav.at, "cut.cent2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent3, filename = file.path(wav.at, "cut.cent3.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro1, filename = file.path(wav.at, "cut.kro1.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro2, filename = file.path(wav.at, "cut.kro2.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro3, filename = file.path(wav.at, "cut.kro3.wav"), extensible = FALSE)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
wav.at <- base::tempdir("/example SoundShape")
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
wav.at <- base::tempdir("/example SoundShape")
store.at <- base::tempdir("output")
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
tempfile(c("ab", "a b c"))   # give file name with spaces in!
tempfile("plot", fileext = c(".ps", ".pdf"))
tempdir() # works on all platforms with a platform-dependent result
wav.at <- base::tempdir("\\example SoundShape")
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
wav.at
wav.at <- base::tempdir("\example SoundShape")
wav.at <- base::tempdir("\\example SoundShape")
tuneR::writeWave(cut.cuv2, filename = file.path(wav.at, "cut.cuv2.wav"), extensible = FALSE)
wav.at, "cut.cuv3.wav"
file.path(wav.at, "cut.cuv3.wav")
wav.at <- base::tempdir("//example SoundShape")
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
file.path(wav.at, "cut.cuv1.wav")
wav.at <- base::tempdir("example/SoundShape")
file.path(wav.at, "cut.cuv1.wav")
wav.at <- base::tempdir(tmpdir = "example SoundShape")
## Show how 'check' is working on some platforms:
if(exists("I'm brave") && `I'm brave` &&
identical(.Platform$OS.type, "unix") && grepl("^/tmp/", tempdir())) {
cat("Current tempdir(): ", tempdir(), "\n")
cat("Removing it :", file.remove(tempdir()),
"; dir.exists(tempdir()):", dir.exists(tempdir()), "\n")
cat("and now  tempdir(check = TRUE) :", tempdir(check = TRUE),"\n")
}
wav.at <- base::tempdir(dir.create("example SoundShape"))
tempdir()
wav.at <- base::tempdir()
file.path(wav.at, "cut.cuv1.wav")
dir.create(wav.at, "example SoundShape")
tempdir
tempdir()
wav.at <- base::tempdir("example SoundShape")
wav.at <- base::tempdir()
file.path(wav.at, "cut.cuv1.wav")
store.at <- base::tempdir("output")
file.path(store.at)
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv2, filename = file.path(wav.at, "cut.cuv2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv3, filename = file.path(wav.at, "cut.cuv3.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent1, filename = file.path(wav.at, "cut.cent1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent2, filename = file.path(wav.at, "cut.cent2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent3, filename = file.path(wav.at, "cut.cent3.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro1, filename = file.path(wav.at, "cut.kro1.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro2, filename = file.path(wav.at, "cut.kro2.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro3, filename = file.path(wav.at, "cut.kro3.wav"), extensible = FALSE)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
# Verify alignment using analysis.type = "twoDshape"
eigensound(analysis.type = "twoDshape", wav.at = file.path(wav.at, "Aligned"), dBlevel = 25, store.at=store.at, plot.exp=TRUE, flim=c(0, 4), tlim=c(0, 0.8), add.contour = T)
wav.at <- base::tempdir()
file.path(wav.at, "output")
if(!dir.exists(file.path(wav.at, "output"))) dir.create(file.path(wav.at, "output"))
file.path(wav.at, "output")
store.at <- file.path(wav.at, "output")
if(!dir.exists(store.at)) dir.create(store.at)
wav.at <- base::tempdir()
store.at <- file.path(wav.at, "output")
if(!dir.exists(store.at)) dir.create(store.at)
# cuvieri
cut.cuv1 <- seewave::cutw(cuvieri, f=44100, from=0.05, to=0.45, output = "Wave")
cut.cuv2 <- seewave::cutw(cuvieri, f=44100, from=0.73, to=1.13, output = "Wave")
cut.cuv3 <- seewave::cutw(cuvieri, f=44100, from=1.47, to=1.87, output = "Wave")
# centralis
cut.cent1 <- seewave::cutw(centralis, f=44100, from=0.0, to=0.8, output = "Wave")
cut.cent2 <- seewave::cutw(centralis, f=44100, from=1.08, to=1.78, output = "Wave")
cut.cent3 <- seewave::cutw(centralis, f=44100, from=2.1, to=2.8, output = "Wave")
# kroyeri
cut.kro1 <- seewave::cutw(kroyeri, f=44100, from=0.16, to=0.96, output = "Wave")
cut.kro2 <- seewave::cutw(kroyeri, f=44100, from=1.55, to=2.35, output = "Wave")
cut.kro3 <- seewave::cutw(kroyeri, f=44100, from=2.9, to=3.8, output = "Wave")
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv2, filename = file.path(wav.at, "cut.cuv2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv3, filename = file.path(wav.at, "cut.cuv3.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent1, filename = file.path(wav.at, "cut.cent1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent2, filename = file.path(wav.at, "cut.cent2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent3, filename = file.path(wav.at, "cut.cent3.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro1, filename = file.path(wav.at, "cut.kro1.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro2, filename = file.path(wav.at, "cut.kro2.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro3, filename = file.path(wav.at, "cut.kro3.wav"), extensible = FALSE)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
# Verify alignment using analysis.type = "twoDshape"
eigensound(analysis.type = "twoDshape", wav.at = file.path(wav.at, "Aligned"), dBlevel = 25, store.at=store.at, plot.exp=TRUE, flim=c(0, 4), tlim=c(0, 0.8), add.contour = T)
# cuvieri sample (see code chunks above)
al.cuv <- tuneR::readWave(file.path(wav.at, "Aligned", "cut.cuv1.wav"))
# Compute spectrogram data
s.cuv <- seewave::spectro(al.cuv, flim=c(0, 4), tlim = c(0, 0.8),
grid=F, f=44100, wl=512, ovlp=70, cont=TRUE,
contlevels = seq(-25, -25, 1), collevels = seq(-40, 0, 0.1))
# Create 3D spectrogram
threeDspectro(al.cuv, dBlevel=40, flim=c(0, 4), tlim=c(0, 0.8))
?dev.off()
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(SoundShape)
library(seewave)
library(tuneR)
wav.at <- base::tempdir()
wav.at <- base::tempdir()
store.at <- file.path(wav.at, "output")
file.path(base::tempdir(), "original wave")
wav.at <- file.path(base::tempdir(), "original wave")
if(!dir.exists(wav.at)) dir.create(wav.at)
store.at <- file.path(wav.at, "output")
if(!dir.exists(store.at)) dir.create(store.at)
store.at <- file.path(base::tempdir(), "output")
if(!dir.exists(store.at)) dir.create(store.at)
# cuvieri
cut.cuv1 <- seewave::cutw(cuvieri, f=44100, from=0.05, to=0.45, output = "Wave")
cut.cuv2 <- seewave::cutw(cuvieri, f=44100, from=0.73, to=1.13, output = "Wave")
cut.cuv3 <- seewave::cutw(cuvieri, f=44100, from=1.47, to=1.87, output = "Wave")
# centralis
cut.cent1 <- seewave::cutw(centralis, f=44100, from=0.0, to=0.8, output = "Wave")
cut.cent2 <- seewave::cutw(centralis, f=44100, from=1.08, to=1.78, output = "Wave")
cut.cent3 <- seewave::cutw(centralis, f=44100, from=2.1, to=2.8, output = "Wave")
# kroyeri
cut.kro1 <- seewave::cutw(kroyeri, f=44100, from=0.16, to=0.96, output = "Wave")
cut.kro2 <- seewave::cutw(kroyeri, f=44100, from=1.55, to=2.35, output = "Wave")
cut.kro3 <- seewave::cutw(kroyeri, f=44100, from=2.9, to=3.8, output = "Wave")
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv2, filename = file.path(wav.at, "cut.cuv2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv3, filename = file.path(wav.at, "cut.cuv3.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent1, filename = file.path(wav.at, "cut.cent1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent2, filename = file.path(wav.at, "cut.cent2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent3, filename = file.path(wav.at, "cut.cent3.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro1, filename = file.path(wav.at, "cut.kro1.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro2, filename = file.path(wav.at, "cut.kro2.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro3, filename = file.path(wav.at, "cut.kro3.wav"), extensible = FALSE)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
# Verify alignment using analysis.type = "twoDshape"
eigensound(analysis.type = "twoDshape", wav.at = file.path(wav.at, "Aligned"), dBlevel = 25, store.at=store.at, plot.exp=TRUE, flim=c(0, 4), tlim=c(0, 0.8), add.contour = T)
# cuvieri sample (see code chunks above)
al.cuv <- tuneR::readWave(file.path(wav.at, "Aligned", "cut.cuv1.wav"))
# Compute spectrogram data
s.cuv <- seewave::spectro(al.cuv, flim=c(0, 4), tlim = c(0, 0.8),
grid=F, f=44100, wl=512, ovlp=70, cont=TRUE,
contlevels = seq(-25, -25, 1), collevels = seq(-40, 0, 0.1))
# Prevent graphical errors in R
dev.off()
# Create 3D spectrogram
threeDspectro(al.cuv, dBlevel=40, flim=c(0, 4), tlim=c(0, 0.8))
# Set background at -40 dB and remove -Inf values from spectrogram data
for(i in 1:length(s.cuv$amp)){if(s.cuv$amp[i] == -Inf |s.cuv$amp[i] <= -40)
{s.cuv$amp[i] <- -40}}
# Add curve of relative amplitude
plot3D::contour3D(x=s.cuv$time, y=s.cuv$freq, colvar=t(s.cuv$amp), z=-25,
plot=T, add=T, addbox = F, col="black", lwd=1.9, nlevels=2, dDepth=0.25)
# Create "Wave" object from aligned ".wav" file
al.samp <- tuneR::readWave(file.path(wav.at, "Aligned", "cut.kro1.wav"))
# Compute spectrogram data using standardized parameters and window dimensions
s.samp <- seewave::spectro(al.samp, f=44100, wl=512, ovlp=70,
flim=c(0,4), tlim = c(0,0.8), plot=FALSE)
# rows (y-axis)
nrow(s.samp$amp)
# columns (x-axis)
ncol(s.samp$amp)
# Using threeDspectro to visualize sampling grid
par(mfrow=c(1,2)) # view side by side
oldpar <- graphics::par(no.readonly = TRUE)
# Using threeDspectro to visualize sampling grid
par(mfrow=c(1,2)) # view side by side
# As "surface"
threeDspectro(al.samp, samp.grid=TRUE, x.length=70, y.length=47, plot.type="surface",
main="As 'surface'", f=44100, wl=512, ovlp=70, flim=c(0,4), tlim = c(0,0.8), dBlevel=25)
# As "points"
threeDspectro(al.samp, samp.grid=TRUE, x.length=70, y.length=47, plot.type="points",
main="As 'points'", f=44100, wl=512, ovlp=70, flim=c(0,4), tlim = c(0,0.8), dBlevel=25)
par(oldpar)
# Sample semilandmarks for each ".wav" file on a folder
eig.sample.linear <- eigensound(analysis.type="threeDshape", dBlevel=25, plot.exp=TRUE,
f=44100, wl=512, ovlp=70, flim=c(0, 4), tlim=c(0, 0.8),
x.length=70, y.length=47, log.scale=FALSE,
wav.at=file.path(wav.at, "Aligned"), store.at=store.at)
# Export 3D graphs with semilandmarks as colored points for inspection
eigensound(analysis.type="threeDshape", dBlevel=25, plot.exp=TRUE,
f=44100, wl=512, ovlp=70, flim=c(0, 4), tlim=c(0, 0.8),
x.length=70, y.length=47, log.scale=FALSE,
wav.at=file.path(wav.at, "Aligned"), store.at=store.at, plot.type="points")
# Sample semilandmarks for each ".wav" file on a folder
eig.sample <- eigensound(analysis.type="threeDshape", dBlevel=25,
f=44100, wl=512, ovlp=70, flim=c(0, 4), tlim=c(0, 0.8),
x.length=70, y.length=47, log.scale=TRUE,
wav.at=file.path(wav.at, "Aligned"), store.at=store.at, plot.exp=TRUE)
# Export 3D graphs with semilandmarks as colored points for inspection
eigensound(analysis.type="threeDshape", dBlevel=25,
f=44100, wl=512, ovlp=70, flim=c(0, 4), tlim=c(0, 0.8),
x.length=70, y.length=47, log.scale=TRUE,
wav.at=file.path(wav.at, "Aligned"), store.at=store.at, plot.exp=TRUE, plot.type="points")
# Linear grid on the x-axis
pca.linear.sample <- stats::prcomp(geomorph::two.d.array(eig.sample.linear))
# View summary results
summary(pca.linear.sample)
# Logarithmic grid on the x-axis
pca.eig.sample <- stats::prcomp(geomorph::two.d.array(eig.sample))
# View summary results
summary(pca.eig.sample)
# Enable broken stick model to be ploted with screeplot function
library(vegan)
# Broken stick model
par(mfrow=c(1,2)) # view side by side
screeplot(pca.linear.sample, bstick=TRUE, main="linear grid")
screeplot(pca.eig.sample, bstick=TRUE, main="log grid")
par(oldpar)
# Mean shape configuration (consensus)
hypo.surf(eig.sample, plot.exp=TRUE, store.at=store.at,  PC="mean",
flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47)
# Minimum and maximum deformations - Principal Component 1
hypo.surf(eig.sample, plot.exp=TRUE, store.at=store.at,  PC=1,
flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47)
# Minimum and maximum deformations - Principal Component 2
hypo.surf(eig.sample, plot.exp=TRUE, store.at=store.at,  PC=2,
flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47)
# Verify names of acoustic units from sample
dimnames(eig.sample)[[3]]
# Based on those names, create factor to use as groups in subsequent ordination plot
sample.gr <- factor(c(rep("centralis", 3), rep("cuvieri", 3), rep("kroyeri", 3)))
# PCA using three-dimensional semilandmark coordinates
pca.eig.sample <- stats::prcomp(geomorph::two.d.array(eig.sample))
# Ordination plot
pca.plot(pca.eig.sample, groups=sample.gr, conv.hulls=sample.gr,
main="Ordination of PC coordinates", leg=TRUE, leg.pos="bottomright", cex.leg = 0.7)
par(oldpar)
# Ordination plot
pca.plot(pca.eig.sample, groups=sample.gr, conv.hulls=sample.gr,
main="Ordination of PC coordinates", leg=TRUE, leg.pos="bottomright", cex.leg = 0.7)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
