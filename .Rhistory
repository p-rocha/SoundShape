# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
library(SoundShape)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), dBlevel=60)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), dBlevel=50
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), dBlevel=50)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), dBlevel=50)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.as="points")
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type="points")
library(roxygen2)
library(devtools)
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
library(SoundShape)
?threeDspectro
library(SoundShape)
?threeDspectro
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type="points")
threeDspectro <-  function (wave, tlim = NULL, flim = NULL, samp.grid = FALSE, plot.type = "surface", along="x", skip.lines=5, space.lines = 0.6, x.length=100, y.length=70, lwd=0.1, plot.exp=FALSE, log.scale = FALSE, cex = 0.5, cex.axis=0.5, cex.lab=0.9, cex.main=1, store.at = NULL, plot.as = "jpeg", color = seewave::spectro.colors(80), f = 44100, wl = 512, ovlp = 70, dBlevel = 30, resfac = 1, rotate.Xaxis = 60, rotate.Yaxis = 40, main = "Spectrogram 3D", scalelab=expression("Amplitude (dB)"), colkey = list(plot = TRUE, cex.clab = 0.8, cex.axis = 1, side = 4, length = 1, width = 1, labels = TRUE, tick = TRUE, lty = 1, lwd = 1, lwd.ticks = 1))
{
if(plot.exp == TRUE && is.null(store.at)){
stop("Use 'store.at' to specify folder path where 3D spectrogram plots will be stored")}
# Acquire spectrogram data
s <- seewave::spectro(wave, plot=F, f=f, wl=wl, ovlp=ovlp, tlim=tlim, flim=flim)
# Set background
for(i in 1:length(s$amp)){if(s$amp[i] == -Inf |s$amp[i] <= -dBlevel)
{s$amp[i] <- -dBlevel}}
if(samp.grid==TRUE){
# Create new sequence to use as coordinates
freq.seq <- seq(1, length(s$freq), length = y.length)
ifelse(isTRUE(log.scale),
time.seq <- 10^(seq(log10(1), log10(length(s$time)), length.out = x.length)),#log
time.seq <- seq(1, length(s$time), length.out = x.length)) # linear scale
# Subset original coordinates by new sequence
time.sub <- s$time[time.seq]
freq.sub <- s$freq[freq.seq]
# Subset matrix of amplitude values using new sequences
amp.sub <- s$amp[freq.seq, time.seq]
# Assign time and frequency coordinates as column and row names of amplitude matrix
colnames(amp.sub) <- time.sub
rownames(amp.sub) <- freq.sub
# Transform amplitude matrix into semilandmark 3D coordinates
ind.3D <- as.matrix(stats::setNames(reshape2::melt(t(amp.sub)), c('time', 'freq', 'amp')))
} # end samp.grid=TRUE
# Plot semilandmarks as points or sound surface
if(plot.exp==TRUE){
if(plot.as == "jpeg")
{grDevices::jpeg(width =5000,height = 3500, units = "px", res = 500,
filename=paste(store.at,"/", main, ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif")
{grDevices::tiff(width=5000, height=3500, units="px", res=500,
filename=paste(store.at,"/", main, ".tif", sep=""))} # uncompressed images
} # end plot.exp == TRUE
if(!isTRUE(samp.grid)){
if(plot.type=="surface")
{
plot3D::persp3D(x = s$time, y = s$freq, z = t(s$amp), colkey=colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis, resfac = resfac,
r = 3, expand = 0.5, scale = T, axes = T, ticktype = "detailed",                     nticks=4, col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)")
} # plot surface
if(plot.type=="lines")
{
if(along=="x"){
plot3D::ribbon3D(x = s$time,
y = s$freq[seq(1, nrow(s$amp), by=skip.lines)],
z = t(s$amp[ seq(1, nrow(s$amp), by=skip.lines), ]),
r = 3, expand = 0.5, scale = T, axes = T,
nticks=4, ticktype = "detailed",
col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
space = space.lines, along = along,  colkey = colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis)
}
if(along=="y"){
plot3D::ribbon3D(x = s$time[seq(1, ncol(s$amp), by=skip.lines)],
y = s$freq,
z = t(s$amp[, seq(1, ncol(s$amp), by=skip.lines)]),
r = 3, expand = 0.5, scale = T, axes = T,
nticks=4, ticktype = "detailed",
col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
space = space.lines, along = along, colkey = colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis)
}
}
} # end samp.grid = TRUE
if(isTRUE(samp.grid)){
if(plot.type=="surface")
{plot3D::persp3D(x = time.sub, y = freq.sub, z = t(amp.sub),
border = "black", lwd = lwd, theta = rotate.Xaxis,
phi = rotate.Yaxis, resfac = resfac, r = 3, expand = 0.5,
cex.axis = cex.axis, cex.lab=cex.lab, cex.main=cex.main,
scale = T, axes = T, col = color,
ticktype = "detailed", nticks = 4, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
main = main, clab = expression("Amplitude (dB)"),
colkey=colkey)
} # end plot.type=="surface"
if(plot.type=="points" && samp.grid == FALSE)
{
stop("Set 'samp.grid = TRUE' and specify 'x.length' and y.length, which control the density of points/semilandmarks ploted") }
if(plot.type=="points") {
plot3D::scatter3D(x = ind.3D[, 1], y = ind.3D[, 2],
z = ind.3D[, 3], pch = 21, cex = cex, theta = rotate.Xaxis,                          phi = rotate.Yaxis, resfac = resfac, r = 3, expand = 0.5,
cex.axis = cex.axis, cex.lab=cex.lab, cex.main=cex.main,
scale = T, axes = T, col = color,
ticktype = "detailed", nticks = 4, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
main = main, clab = expression("Amplitude (dB)"),
colkey=colkey)
} # end plot.type=="points"
} # end samp.grid==TRUE
if(plot.exp==TRUE){grDevices::dev.off()} # export plot only if plot.exp==TRUE
} # end function
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type="points")
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=FALSE, plot.type="points")
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=TRUE, plot.type="points")
threeDspectro <-  function (wave, tlim = NULL, flim = NULL, samp.grid = FALSE, plot.type = "surface", along="x", skip.lines=5, space.lines = 0.6, x.length=100, y.length=70, lwd=0.1, plot.exp=FALSE, log.scale = FALSE, cex = 0.5, cex.axis=0.5, cex.lab=0.9, cex.main=1, store.at = NULL, plot.as = "jpeg", color = seewave::spectro.colors(80), f = 44100, wl = 512, ovlp = 70, dBlevel = 30, resfac = 1, rotate.Xaxis = 60, rotate.Yaxis = 40, main = "Spectrogram 3D", scalelab=expression("Amplitude (dB)"), colkey = list(plot = TRUE, cex.clab = 0.8, cex.axis = 1, side = 4, length = 1, width = 1, labels = TRUE, tick = TRUE, lty = 1, lwd = 1, lwd.ticks = 1))
{
if(plot.exp == TRUE && is.null(store.at)){
stop("Use 'store.at' to specify folder path where 3D spectrogram plots will be stored")}
# Acquire spectrogram data
s <- seewave::spectro(wave, plot=F, f=f, wl=wl, ovlp=ovlp, tlim=tlim, flim=flim)
# Set background
for(i in 1:length(s$amp)){if(s$amp[i] == -Inf |s$amp[i] <= -dBlevel)
{s$amp[i] <- -dBlevel}}
if(samp.grid==TRUE){
# Create new sequence to use as coordinates
freq.seq <- seq(1, length(s$freq), length = y.length)
ifelse(isTRUE(log.scale),
time.seq <- 10^(seq(log10(1), log10(length(s$time)), length.out = x.length)),#log
time.seq <- seq(1, length(s$time), length.out = x.length)) # linear scale
# Subset original coordinates by new sequence
time.sub <- s$time[time.seq]
freq.sub <- s$freq[freq.seq]
# Subset matrix of amplitude values using new sequences
amp.sub <- s$amp[freq.seq, time.seq]
# Assign time and frequency coordinates as column and row names of amplitude matrix
colnames(amp.sub) <- time.sub
rownames(amp.sub) <- freq.sub
# Transform amplitude matrix into semilandmark 3D coordinates
ind.3D <- as.matrix(stats::setNames(reshape2::melt(t(amp.sub)), c('time', 'freq', 'amp')))
} # end samp.grid=TRUE
# Plot semilandmarks as points or sound surface
if(plot.exp==TRUE){
if(plot.as == "jpeg")
{grDevices::jpeg(width =5000,height = 3500, units = "px", res = 500,
filename=paste(store.at,"/", main, ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif")
{grDevices::tiff(width=5000, height=3500, units="px", res=500,
filename=paste(store.at,"/", main, ".tif", sep=""))} # uncompressed images
} # end plot.exp == TRUE
if(!isTRUE(samp.grid)){
if(plot.type=="surface")
{
plot3D::persp3D(x = s$time, y = s$freq, z = t(s$amp), colkey=colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis, resfac = resfac,
r = 3, expand = 0.5, scale = T, axes = T, ticktype = "detailed",                     nticks=4, col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)")
} # plot surface
if(plot.type=="lines")
{
if(along=="x"){
plot3D::ribbon3D(x = s$time,
y = s$freq[seq(1, nrow(s$amp), by=skip.lines)],
z = t(s$amp[ seq(1, nrow(s$amp), by=skip.lines), ]),
r = 3, expand = 0.5, scale = T, axes = T,
nticks=4, ticktype = "detailed",
col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
space = space.lines, along = along,  colkey = colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis)
}
if(along=="y"){
plot3D::ribbon3D(x = s$time[seq(1, ncol(s$amp), by=skip.lines)],
y = s$freq,
z = t(s$amp[, seq(1, ncol(s$amp), by=skip.lines)]),
r = 3, expand = 0.5, scale = T, axes = T,
nticks=4, ticktype = "detailed",
col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
space = space.lines, along = along, colkey = colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis)
}
}
} # end samp.grid = TRUE
if(isTRUE(samp.grid)){
if(plot.type=="surface")
{plot3D::persp3D(x = time.sub, y = freq.sub, z = t(amp.sub),
border = "black", lwd = lwd, theta = rotate.Xaxis,
phi = rotate.Yaxis, resfac = resfac, r = 3, expand = 0.5,
cex.axis = cex.axis, cex.lab=cex.lab, cex.main=cex.main,
scale = T, axes = T, col = color,
ticktype = "detailed", nticks = 4, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
main = main, clab = expression("Amplitude (dB)"),
colkey=colkey)
} # end plot.type=="surface"
if(plot.type=="points" && samp.grid == FALSE)
stop("Set 'samp.grid = TRUE' and specify 'x.length' and y.length, which control the density of points/semilandmarks ploted")
if(plot.type=="points") {
plot3D::scatter3D(x = ind.3D[, 1], y = ind.3D[, 2],
z = ind.3D[, 3], pch = 21, cex = cex, theta = rotate.Xaxis,                          phi = rotate.Yaxis, resfac = resfac, r = 3, expand = 0.5,
cex.axis = cex.axis, cex.lab=cex.lab, cex.main=cex.main,
scale = T, axes = T, col = color,
ticktype = "detailed", nticks = 4, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
main = main, clab = expression("Amplitude (dB)"),
colkey=colkey)
} # end plot.type=="points"
} # end samp.grid==TRUE
if(plot.exp==TRUE){grDevices::dev.off()} # export plot only if plot.exp==TRUE
} # end function
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type="points")
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=FALSE, plot.type="points")
threeDspectro <-  function (wave, tlim = NULL, flim = NULL, samp.grid = FALSE, plot.type = "surface", along="x", skip.lines=5, space.lines = 0.6, x.length=100, y.length=70, lwd=0.1, plot.exp=FALSE, log.scale = FALSE, cex = 0.5, cex.axis=0.5, cex.lab=0.9, cex.main=1, store.at = NULL, plot.as = "jpeg", color = seewave::spectro.colors(80), f = 44100, wl = 512, ovlp = 70, dBlevel = 30, resfac = 1, rotate.Xaxis = 60, rotate.Yaxis = 40, main = "Spectrogram 3D", scalelab=expression("Amplitude (dB)"), colkey = list(plot = TRUE, cex.clab = 0.8, cex.axis = 1, side = 4, length = 1, width = 1, labels = TRUE, tick = TRUE, lty = 1, lwd = 1, lwd.ticks = 1))
{
if(plot.exp == TRUE && is.null(store.at)){
stop("Use 'store.at' to specify folder path where 3D spectrogram plots will be stored")}
if(plot.type == "points" && samp.grid == FALSE){
stop("Set 'samp.grid = TRUE' and specify 'x.length' and y.length, which will control the density of points/semilandmarks ploted")}
# Acquire spectrogram data
s <- seewave::spectro(wave, plot=F, f=f, wl=wl, ovlp=ovlp, tlim=tlim, flim=flim)
# Set background
for(i in 1:length(s$amp)){if(s$amp[i] == -Inf |s$amp[i] <= -dBlevel)
{s$amp[i] <- -dBlevel}}
if(samp.grid==TRUE){
# Create new sequence to use as coordinates
freq.seq <- seq(1, length(s$freq), length = y.length)
ifelse(isTRUE(log.scale),
time.seq <- 10^(seq(log10(1), log10(length(s$time)), length.out = x.length)),#log
time.seq <- seq(1, length(s$time), length.out = x.length)) # linear scale
# Subset original coordinates by new sequence
time.sub <- s$time[time.seq]
freq.sub <- s$freq[freq.seq]
# Subset matrix of amplitude values using new sequences
amp.sub <- s$amp[freq.seq, time.seq]
# Assign time and frequency coordinates as column and row names of amplitude matrix
colnames(amp.sub) <- time.sub
rownames(amp.sub) <- freq.sub
# Transform amplitude matrix into semilandmark 3D coordinates
ind.3D <- as.matrix(stats::setNames(reshape2::melt(t(amp.sub)), c('time', 'freq', 'amp')))
} # end samp.grid=TRUE
# Plot semilandmarks as points or sound surface
if(plot.exp==TRUE){
if(plot.as == "jpeg")
{grDevices::jpeg(width =5000,height = 3500, units = "px", res = 500,
filename=paste(store.at,"/", main, ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif")
{grDevices::tiff(width=5000, height=3500, units="px", res=500,
filename=paste(store.at,"/", main, ".tif", sep=""))} # uncompressed images
} # end plot.exp == TRUE
if(!isTRUE(samp.grid)){
if(plot.type=="surface")
{
plot3D::persp3D(x = s$time, y = s$freq, z = t(s$amp), colkey=colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis, resfac = resfac,
r = 3, expand = 0.5, scale = T, axes = T, ticktype = "detailed",                     nticks=4, col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)")
} # plot surface
if(plot.type=="lines")
{
if(along=="x"){
plot3D::ribbon3D(x = s$time,
y = s$freq[seq(1, nrow(s$amp), by=skip.lines)],
z = t(s$amp[ seq(1, nrow(s$amp), by=skip.lines), ]),
r = 3, expand = 0.5, scale = T, axes = T,
nticks=4, ticktype = "detailed",
col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
space = space.lines, along = along,  colkey = colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis)
}
if(along=="y"){
plot3D::ribbon3D(x = s$time[seq(1, ncol(s$amp), by=skip.lines)],
y = s$freq,
z = t(s$amp[, seq(1, ncol(s$amp), by=skip.lines)]),
r = 3, expand = 0.5, scale = T, axes = T,
nticks=4, ticktype = "detailed",
col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
space = space.lines, along = along, colkey = colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis)
}
}
} # end samp.grid = TRUE
if(isTRUE(samp.grid)){
if(plot.type=="surface")
{plot3D::persp3D(x = time.sub, y = freq.sub, z = t(amp.sub),
border = "black", lwd = lwd, theta = rotate.Xaxis,
phi = rotate.Yaxis, resfac = resfac, r = 3, expand = 0.5,
cex.axis = cex.axis, cex.lab=cex.lab, cex.main=cex.main,
scale = T, axes = T, col = color,
ticktype = "detailed", nticks = 4, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
main = main, clab = expression("Amplitude (dB)"),
colkey=colkey)
} # end plot.type=="surface"
if(plot.type=="points" && samp.grid == FALSE)
stop("Set 'samp.grid = TRUE' and specify 'x.length' and y.length, which control the density of points/semilandmarks ploted")
if(plot.type=="points") {
plot3D::scatter3D(x = ind.3D[, 1], y = ind.3D[, 2],
z = ind.3D[, 3], pch = 21, cex = cex, theta = rotate.Xaxis,                          phi = rotate.Yaxis, resfac = resfac, r = 3, expand = 0.5,
cex.axis = cex.axis, cex.lab=cex.lab, cex.main=cex.main,
scale = T, axes = T, col = color,
ticktype = "detailed", nticks = 4, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
main = main, clab = expression("Amplitude (dB)"),
colkey=colkey)
} # end plot.type=="points"
} # end samp.grid==TRUE
if(plot.exp==TRUE){grDevices::dev.off()} # export plot only if plot.exp==TRUE
} # end function
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=FALSE, plot.type="points")
threeDspectro <-  function (wave, tlim = NULL, flim = NULL, samp.grid = FALSE, plot.type = "surface", along="x", skip.lines=5, space.lines = 0.6, x.length=100, y.length=70, lwd=0.1, plot.exp=FALSE, log.scale = FALSE, cex = 0.5, cex.axis=0.5, cex.lab=0.9, cex.main=1, store.at = NULL, plot.as = "jpeg", color = seewave::spectro.colors(80), f = 44100, wl = 512, ovlp = 70, dBlevel = 30, resfac = 1, rotate.Xaxis = 60, rotate.Yaxis = 40, main = "Spectrogram 3D", scalelab=expression("Amplitude (dB)"), colkey = list(plot = TRUE, cex.clab = 0.8, cex.axis = 1, side = 4, length = 1, width = 1, labels = TRUE, tick = TRUE, lty = 1, lwd = 1, lwd.ticks = 1))
{
if(plot.exp == TRUE && is.null(store.at)){
stop("Use 'store.at' to specify folder path where 3D spectrogram plots will be stored")}
if(plot.type == "points" && samp.grid == FALSE){
stop(" 'plot.type = TRUE' require 'samp.grid = TRUE'. You can also specify 'x.length' and 'y.length', which will control the density of points/semilandmarks ploted")}
# Acquire spectrogram data
s <- seewave::spectro(wave, plot=F, f=f, wl=wl, ovlp=ovlp, tlim=tlim, flim=flim)
# Set background
for(i in 1:length(s$amp)){if(s$amp[i] == -Inf |s$amp[i] <= -dBlevel)
{s$amp[i] <- -dBlevel}}
if(samp.grid==TRUE){
# Create new sequence to use as coordinates
freq.seq <- seq(1, length(s$freq), length = y.length)
ifelse(isTRUE(log.scale),
time.seq <- 10^(seq(log10(1), log10(length(s$time)), length.out = x.length)),#log
time.seq <- seq(1, length(s$time), length.out = x.length)) # linear scale
# Subset original coordinates by new sequence
time.sub <- s$time[time.seq]
freq.sub <- s$freq[freq.seq]
# Subset matrix of amplitude values using new sequences
amp.sub <- s$amp[freq.seq, time.seq]
# Assign time and frequency coordinates as column and row names of amplitude matrix
colnames(amp.sub) <- time.sub
rownames(amp.sub) <- freq.sub
# Transform amplitude matrix into semilandmark 3D coordinates
ind.3D <- as.matrix(stats::setNames(reshape2::melt(t(amp.sub)), c('time', 'freq', 'amp')))
} # end samp.grid=TRUE
# Plot semilandmarks as points or sound surface
if(plot.exp==TRUE){
if(plot.as == "jpeg")
{grDevices::jpeg(width =5000,height = 3500, units = "px", res = 500,
filename=paste(store.at,"/", main, ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif")
{grDevices::tiff(width=5000, height=3500, units="px", res=500,
filename=paste(store.at,"/", main, ".tif", sep=""))} # uncompressed images
} # end plot.exp == TRUE
if(!isTRUE(samp.grid)){
if(plot.type=="surface")
{
plot3D::persp3D(x = s$time, y = s$freq, z = t(s$amp), colkey=colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis, resfac = resfac,
r = 3, expand = 0.5, scale = T, axes = T, ticktype = "detailed",                     nticks=4, col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)")
} # plot surface
if(plot.type=="lines")
{
if(along=="x"){
plot3D::ribbon3D(x = s$time,
y = s$freq[seq(1, nrow(s$amp), by=skip.lines)],
z = t(s$amp[ seq(1, nrow(s$amp), by=skip.lines), ]),
r = 3, expand = 0.5, scale = T, axes = T,
nticks=4, ticktype = "detailed",
col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
space = space.lines, along = along,  colkey = colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis)
}
if(along=="y"){
plot3D::ribbon3D(x = s$time[seq(1, ncol(s$amp), by=skip.lines)],
y = s$freq,
z = t(s$amp[, seq(1, ncol(s$amp), by=skip.lines)]),
r = 3, expand = 0.5, scale = T, axes = T,
nticks=4, ticktype = "detailed",
col=color, cex.axis=cex.axis, cex.lab=cex.lab,
cex.main=cex.main, clab = scalelab, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
space = space.lines, along = along, colkey = colkey, main=main,
theta = rotate.Xaxis, phi = rotate.Yaxis)
}
}
} # end samp.grid = TRUE
if(isTRUE(samp.grid)){
if(plot.type=="surface")
{plot3D::persp3D(x = time.sub, y = freq.sub, z = t(amp.sub),
border = "black", lwd = lwd, theta = rotate.Xaxis,
phi = rotate.Yaxis, resfac = resfac, r = 3, expand = 0.5,
cex.axis = cex.axis, cex.lab=cex.lab, cex.main=cex.main,
scale = T, axes = T, col = color,
ticktype = "detailed", nticks = 4, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
main = main, clab = expression("Amplitude (dB)"),
colkey=colkey)
} # end plot.type=="surface"
if(plot.type=="points") {
plot3D::scatter3D(x = ind.3D[, 1], y = ind.3D[, 2],
z = ind.3D[, 3], pch = 21, cex = cex, theta = rotate.Xaxis,                          phi = rotate.Yaxis, resfac = resfac, r = 3, expand = 0.5,
cex.axis = cex.axis, cex.lab=cex.lab, cex.main=cex.main,
scale = T, axes = T, col = color,
ticktype = "detailed", nticks = 4, xlab = "Time (s)",
ylab = "Frequency (kHz)", zlab = "Amplitude (dB)",
main = main, clab = expression("Amplitude (dB)"),
colkey=colkey)
} # end plot.type=="points"
} # end samp.grid==TRUE
if(plot.exp==TRUE){grDevices::dev.off()} # export plot only if plot.exp==TRUE
} # end function
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=TRUE, plot.type="points")
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=TRUE, plot.type="points", x.length = 50)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=TRUE, plot.type="points", x.length = 20)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=TRUE, plot.type="points", x.length = 30)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=TRUE, plot.type="points", x.length = 25)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=TRUE, plot.type="points", x.length = 25)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=TRUE, plot.type="points", x.length = 20)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=TRUE, plot.type="points", x.length = 20, y.length = 40)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), samp.grid=TRUE, plot.type="points", x.length = 20, y.length = 50)
(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type = "lines")
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type = "lines")
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type = "lines", along="y")
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type = "lines", along="y", skip.lines=5)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type = "lines", along="y", skip.lines=8)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type = "lines", along="y", skip.lines=10)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type = "lines", along="y", skip.lines=12)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type = "lines", along="y", skip.lines=15)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type = "lines", along="y", skip.lines=15)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type = "lines", along="y", skip.lines=18)
threeDspectro(cuvieri, tlim=c(0, 0.5), flim=c(0, 4), plot.type = "lines", along="y", skip.lines=18, space.lines=0.8)
library(roxygen2)
library(devtools)
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Build package
build("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape_1.3.0.tar.gz")
beepr::beep(4)
library(SoundShape)
library(roxygen2)
library(devtools)
# Clear environment prior to package
rm(list=ls())
install.packages("vegan")
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Build package
build("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
library(roxygen2)
library(devtools)
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Build package
build("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape_1.3.0.tar.gz")
usethis::use_travis()
# travis check
devtools::::use_travis()
# travis check
devtools::use_travis()
# travis check
usethis::use_github_action()
# travis check
?usethis::use_github_action()
# travis check
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
usethis::use_github_action()
