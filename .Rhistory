data(cuvieri)
# Select acoustic unit from sample
cuvieri.cut <- seewave::cutw(cuvieri, f=44100, from = 0.05, to=0.45, output="Wave")
# 3D spectrogram
par(mfrow=c(1,2), mar=c(0,2,1,0))
threeDspectro(cuvieri.cut, flim=c(0, 2.5),
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8, resfac=3)
# Semilandmarks from sampled surface
threeDspectro(cuvieri.cut, flim=c(0, 2.5), plot.type="points",
samp.grid=TRUE, x.length=70, y.length=50, main="Semilandmarks 3D",
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8)
# Traditional oscillogram and spectrogram
par(mfrow=c(1,2), mar=c(4,4,2,1)) # view side by side
seewave::oscillo(cuvieri.cut, title="Oscillogram")
seewave::spectro(cuvieri.cut, flim=c(0, 2.5), grid=FALSE, scale=FALSE, main="Spectrogram")
citation("SoundShape")
# Samples of data from SoundShape package
data(cuvieri)
data(centralis)
data(kroyeri)
# Plot spectro from sample and highlight acoustic units
# centralis
seewave::spectro(centralis, flim = c(0, 4), wl=512, f=44100, ovlp=70, grid=FALSE)
graphics::abline(v=c(0.1, 0.8, 1.08, 1.78, 2.1, 2.8), lty=2)
# cuvieri
seewave::spectro(cuvieri, flim = c(0,4), wl=512, f=44100, ovlp=70, grid=FALSE)
graphics::abline(v=c(0.05, 0.45, 0.73, 1.13, 1.47, 1.87), lty=2)
# kroyeri
seewave::spectro(kroyeri, flim = c(0, 4), wl=512, f=44100, ovlp=70, grid=FALSE)
graphics::abline(v=c(0.16, 0.96, 1.55, 2.35, 2.9, 3.8), lty=2)
# Select acoustic units
cut.centralis <- seewave::cutw(centralis, f=44100, from=0, to=0.9, output = "Wave")
cut.cuvieri <- seewave::cutw(cuvieri, f=44100, from=0, to=0.9, output = "Wave")
cut.kroyeri <- seewave::cutw(kroyeri, f=44100, from=0.2, to=1.1, output = "Wave")
# Spectrogram plots using standardized sound window dimensions
par(mfrow=c(2,2), mar=c(4,4,2,2))
seewave::spectro(cut.centralis, flim=c(0, 4), tlim=c(0, 0.8), main="data(centralis)",
wl=512, f=44100, ovlp=70, grid=FALSE, scale=FALSE)
seewave::spectro(cut.cuvieri, flim=c(0, 4), tlim=c(0, 0.8), main="data(cuvieri)",
wl=512, f=44100, ovlp=70, grid=FALSE, scale=FALSE)
seewave::spectro(cut.kroyeri, flim=c(0, 4), tlim=c(0, 0.8), main="data(kroyeri)",
wl=512, f=44100, ovlp=70, grid=FALSE, scale=FALSE)
# 2D spectrogram with curves of relative amplitude at -25 dB
par(mfrow=c(1,2), mar=c(4,4,1,1))
s.kro <- seewave::spectro(cut.kroyeri, flim=c(0, 4), tlim = c(0, 0.8),
grid=F, scale=F, f=44100, wl=512, ovlp=70, cont=TRUE,
contlevels = seq(-25, -25, 1), collevels = seq(-40, 0, 0.1))
# 3D spectrogram (with a lower dBlevel for illustrative purpuses)
threeDspectro(cut.kroyeri, dBlevel=40, flim=c(0, 4), tlim=c(0, 0.8), main="",
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8, resfac=2)
# Set background at -40 dB and remove -Inf values from spectrogram data
for(i in 1:length(s.kro$amp)){if(s.kro$amp[i] == -Inf |s.kro$amp[i] <= -40)
{s.kro$amp[i] <- -40}}
# Add curve of relative amplitude
plot3D::contour3D(x=s.kro$time, y=s.kro$freq, colvar=t(s.kro$amp), z=-25,
plot=T, add=T, addbox=F, col="black", lwd=1.9, nlevels=2, dDepth=0.25)
# Using threeDspectro to visualize sampling grid
par(mfrow=c(1,2), mar=c(1,2,1,0))
# As "surface"
threeDspectro(cut.kroyeri, samp.grid=TRUE, x.length=70, y.length=47, plot.type="surface",
dBlevel=25, flim=c(0, 4), tlim=c(0, 0.8), f=44100, wl=512, ovlp=70, main="As 'surface'",
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8)
# As "points"
threeDspectro(cut.kroyeri, samp.grid=TRUE, x.length=70, y.length=47, plot.type="points",
dBlevel=25, flim=c(0, 4), tlim=c(0, 0.8), f=44100, wl=512, ovlp=70, main="As 'points'",
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8)
?geomorph::plotTangentSpace()
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0000.tar.gz")
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0000.tar.gz")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0000.tar.gz")
library(devtools)
library(devtools)
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0000.tar.gz")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0000.tar.gz")
# travis check
usethis::use_travis()
library(xfun)
# Check reverse dependencies
?rev_check
# Check reverse dependencies
rev_check("C:/R/SoundShape_1.1.0000.tar.gz")
citation("SoundShape")
# Check reverse dependencies
rev_check("SoundShape")
# Check reverse dependencies
rev_check(pkg=SoundShape)
# Check reverse dependencies
rev_check(pkg="SoundShape")
# Check reverse dependencies
rev_check(pkg="SoundShape", src="C:/Users/Pedro/Documents/R/win-library/4.0")
# Check reverse dependencies
rev_check(pkg="SoundShape", src="C:/Users/Pedro/Documents/R/win-library/4.0/SoundShape")
# Check reverse dependencies
rev_check(pkg="SoundShape", src="C:/R/SoundShape_1.1.0000.tar.gz")
# Check reverse dependencies
rev_check(pkg="SoundShape", src="C:/R")
# Check reverse dependencies
rev_check(pkg="SoundShape_1.1.0000.tar.gz", src="C:/R")
# Check reverse dependencies
rev_check(pkg="SoundShape", src="C:/R/SoundShape")
?parallel
library(parallel)
remove.packages(parallel)
# Check reverse dependencies
rev_check(pkg="SoundShape", src="C:/R/SoundShape")
install.packages(parallel)
install.packages("parallel")
install.packages("parallel")
library(xfun)
# Check reverse dependencies
rev_check(pkg="SoundShape", src="C:/R/SoundShape")
?revdep_check()
library(devtools)
?revdep_check()
devtools::revdep()
?devtools::revdep()
# Check reverse dependencies
revdep("SoundShape")
# Check reverse dependencies
revdep("SoundShape", recursive = T)
install.packages("revdepcheck")
revdep("ggplot2")
# Check reverse dependencies
revdep("SoundShape")
#                                         #
#      Developing SoundShape package      #
#                                         #
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0.tar.gz")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0.tar.gz")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0.tar.gz")
install.packages("htmltools")
install.packages("htmltools")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0.tar.gz")
#                                         #
#      Developing SoundShape package      #
#                                         #
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0.tar.gz")
#                                         #
#      Developing SoundShape package      #
#                                         #
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0.tar.gz")
#                                         #
#      Developing SoundShape package      #
#                                         #
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0.tar.gz")
#                                         #
#      Developing SoundShape package      #
#                                         #
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0.tar.gz")
?setwd
#                                         #
#      Developing SoundShape package      #
#                                         #
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0.tar.gz")
#                                         #
#      Developing SoundShape package      #
#                                         #
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0.tar.gz")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
oldpar <- graphics::par(no.readonly = TRUE)
library(SoundShape)
# Sample data from SoundShape
data(cuvieri)
# Select acoustic unit from sample
cuvieri.cut <- seewave::cutw(cuvieri, f=44100, from = 0.05, to=0.45, output="Wave")
# 3D spectrogram
par(mfrow=c(1,2), mar=c(0,2,1,0))
threeDspectro(cuvieri.cut, flim=c(0, 2.5),
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8, resfac=3)
# Semilandmarks from sampled surface
threeDspectro(cuvieri.cut, flim=c(0, 2.5), plot.type="points",
samp.grid=TRUE, x.length=70, y.length=50, main="Semilandmarks 3D",
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8)
#                                         #
#      Developing SoundShape package      #
#                                         #
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0.tar.gz")
library(SoundShape)
?align.wave
?eigensound
library(SoundShape)
?eigensound
?tiff
?threeDspectro()
library(SoundShape)
library(roxygen2)
library(devtools)
find_rtools()
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
create("SoundShape")
# Install package directly
install("C:/R/SoundShape")
install.packages('signal')
install.packages("signal")
# Install package directly
install("C:/R/SoundShape")
library(roxygen2)
library(devtools)
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
install.packages("stringi")
install.packages("stringi")
R.version
install.packages("stringi")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
remove.packages('glue')
install.packages('stringi     ')
install.packages('stringi')
install.packages('stringi')
install.packages('magrittr')
install.packages('glue')
install.packages('Rcpp')
install.packages('utf8')
install.packages('crayon')
install.packages("crayon")
install.packages("cli")
install.packages("colorspace")
install.packages("pillar")
install.packages("fansi")
install.packages("ellipsis")
install.packages("viridisLite")
install.packages("R6")
install.packages("withr")
install.packages("tibble")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
RStudio.Version()
