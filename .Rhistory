writeWave(centralis, filename = file.path(orig.wav, "centralis.wav"), extensible = T)
writeWave(cuvieri, filename = file.path(orig.wav, "cuvieri.wav"), extensible = T)
writeWave(kroyeri, filename = file.path(orig.wav, "kroyeri.wav"), extensible = T)
# Store Raven Pro selection tables at same folder from original ".wav" files
for(i in 1:length(raven.list)){
write.table(raven.list[i], file=file.path(orig.wav, names(raven.list)[i]),
quote=F, sep="\t", row.names = F, col.names = colnames(raven.list[[i]]))  } # end loop
# Verify if folder has both original ".wav" files and Raven's selections
dir(orig.wav)
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav, wav.samples = wav.at)
# Verify samples
dir(wav.at)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25, flim=c(0, 4))
wav.at
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
raven.to.wave <- function(orig.wav.folder=NULL, raven.at=orig.wav.folder, wav.samples="wav samples", max.dur=NULL){
if(is.null(orig.wav.folder)) {stop("Use 'orig.wav.folder' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav.folder, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(file.path(raven.at, raven),
h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 20% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.2  } # max.dur
# Create folder to store sample wav files
if(!dir.exists(wav.samples) &
!dir.exists(file.path(orig.wav.folder, wav.samples)))
dir.create(file.path(orig.wav.folder, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(file.path(orig.wav.folder,
grep(stringr::str_sub(wav,start=0, end = -5),
raven.tables, value=T)), h=T, sep="\t")
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- tuneR::readWave(file.path(orig.wav.folder, wav), units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"] - max.dur,
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"]+ max.dur)
if(dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename=file.path(wav.samples, ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep="")))) }
if(!dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav.folder, wav.samples,
ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep=""))))  }
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
} # end function
raven.to.wave
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav, wav.samples = wav.at)
raven.to.wave <- function(orig.wav.folder=NULL, raven.at=orig.wav.folder, wav.samples="wav samples", max.dur=NULL){
if(is.null(orig.wav.folder)) {stop("Use 'orig.wav.folder' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav.folder, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(file.path(raven.at, raven),
h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 5% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.05  } # max.dur
# Create folder to store sample wav files
if(!dir.exists(wav.samples) &
!dir.exists(file.path(orig.wav.folder, wav.samples)))
dir.create(file.path(orig.wav.folder, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(file.path(orig.wav.folder,
grep(stringr::str_sub(wav,start=0, end = -5),
raven.tables, value=T)), h=T, sep="\t")
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- tuneR::readWave(file.path(orig.wav.folder, wav), units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"],
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"]+ max.dur)
if(dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename=file.path(wav.samples, ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep="")))) }
if(!dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav.folder, wav.samples,
ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep=""))))  }
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
} # end function
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav, wav.samples = wav.at)
raven.to.wave <- function(orig.wav.folder=NULL, raven.at=orig.wav.folder, wav.samples="wav samples", max.dur=NULL){
if(is.null(orig.wav.folder)) {stop("Use 'orig.wav.folder' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav.folder, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(file.path(raven.at, raven),
h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 5% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.05  } # max.dur
# Create folder to store sample wav files
if(!dir.exists(wav.samples) &
!dir.exists(file.path(orig.wav.folder, wav.samples)))
dir.create(file.path(orig.wav.folder, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(file.path(orig.wav.folder,
grep(stringr::str_sub(wav,start=0, end = -5),
raven.tables, value=T)), h=T, sep="\t")
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- tuneR::readWave(file.path(orig.wav.folder, wav), units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"]-max.dur,
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"]+ max.dur)
if(dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename=file.path(wav.samples, ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep="")))) }
if(!dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav.folder, wav.samples,
ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep=""))))  }
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
} # end function
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav, wav.samples = wav.at)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
raven.to.wave <- function(orig.wav.folder=NULL, raven.at=orig.wav.folder, wav.samples="wav samples", max.dur=NULL){
if(is.null(orig.wav.folder)) {stop("Use 'orig.wav.folder' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav.folder, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(file.path(raven.at, raven),
h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 5% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.05  } # max.dur
# Create folder to store sample wav files
if(!dir.exists(wav.samples) &
!dir.exists(file.path(orig.wav.folder, wav.samples)))
dir.create(file.path(orig.wav.folder, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(file.path(orig.wav.folder,
grep(stringr::str_sub(wav,start=0, end = -5),
raven.tables, value=T)), h=T, sep="\t")
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- tuneR::readWave(file.path(orig.wav.folder, wav), units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"],
to= raven.temp$End.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"])
if(dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename=file.path(wav.samples, ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep="")))) }
if(!dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav.folder, wav.samples,
ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep=""))))  }
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
} # end function
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav, wav.samples = wav.at)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
# cuvieri
cut.cuv1 <- seewave::cutw(cuvieri, f=44100, from=0.05, to=0.45, output = "Wave")
cut.cuv2 <- seewave::cutw(cuvieri, f=44100, from=0.73, to=1.13, output = "Wave")
cut.cuv3 <- seewave::cutw(cuvieri, f=44100, from=1.47, to=1.87, output = "Wave")
# centralis
cut.cent1 <- seewave::cutw(centralis, f=44100, from=0.0, to=0.8, output = "Wave")
cut.cent2 <- seewave::cutw(centralis, f=44100, from=1.08, to=1.78, output = "Wave")
cut.cent3 <- seewave::cutw(centralis, f=44100, from=2.1, to=2.8, output = "Wave")
# kroyeri
cut.kro1 <- seewave::cutw(kroyeri, f=44100, from=0.16, to=0.96, output = "Wave")
cut.kro2 <- seewave::cutw(kroyeri, f=44100, from=1.55, to=2.35, output = "Wave")
cut.kro3 <- seewave::cutw(kroyeri, f=44100, from=2.9, to=3.8, output = "Wave")
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv2, filename = file.path(wav.at, "cut.cuv2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv3, filename = file.path(wav.at, "cut.cuv3.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent1, filename = file.path(wav.at, "cut.cent1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent2, filename = file.path(wav.at, "cut.cent2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent3, filename = file.path(wav.at, "cut.cent3.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro1, filename = file.path(wav.at, "cut.kro1.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro2, filename = file.path(wav.at, "cut.kro2.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro3, filename = file.path(wav.at, "cut.kro3.wav"), extensible = FALSE)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
orig.wav.folder = orig.wav
wav.samples = wav.at
raven.at=orig.wav.folder
# List ".wav" files
wav.files <- dir(orig.wav.folder, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(file.path(raven.at, raven),
h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
raven.selections$Delta.Time <- raven.selections$End.Time..s.-
raven.selections$Begin.Time..s.
raven.selections$Delta.Time
raven.selections$Delta.Time*1.1
raven.selections$Delta.Time*0.1
raven.to.wave <- function(orig.wav.folder=NULL, raven.at=orig.wav.folder, wav.samples="wav samples", max.dur=NULL){
if(is.null(orig.wav.folder)) {stop("Use 'orig.wav.folder' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav.folder, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(file.path(raven.at, raven),
h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Create delta time
# if(is.null(max.dur)){
raven.selections$Delta.Time <- raven.selections$End.Time..s.-
raven.selections$Begin.Time..s.
#longest acoustic unit plus 5% of longest duration
#max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.05  } # max.dur
# Create folder to store sample wav files
if(!dir.exists(wav.samples) &
!dir.exists(file.path(orig.wav.folder, wav.samples)))
dir.create(file.path(orig.wav.folder, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(file.path(orig.wav.folder,
grep(stringr::str_sub(wav,start=0, end = -5),
raven.tables, value=T)), h=T, sep="\t")
# Calculate duration (delta time)
raven.temp$Delta.Time <- raven.temp$End.Time..s.-raven.temp$Begin.Time..s.
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- tuneR::readWave(file.path(orig.wav.folder, wav), units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i &
raven.temp$View=="Waveform 1"] -
raven.temp$Delta.Time[
raven.temp$Selection== i &
raven.temp$View=="Waveform 1"]*0.1,
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i &
raven.temp$View=="Waveform 1"] +
raven.temp$Delta.Time[
raven.temp$Selection== i &
raven.temp$View=="Waveform 1"]*1.2)
if(dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename=file.path(wav.samples, ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep="")))) }
if(!dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav.folder, wav.samples,
ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep=""))))  }
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
} # end function
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav, wav.samples = wav.at)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
raven.to.wave <- function(orig.wav.folder=NULL, raven.at=orig.wav.folder, wav.samples="wav samples"){
if(is.null(orig.wav.folder)) {stop("Use 'orig.wav.folder' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav.folder, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Create folder to store sample wav files
if(!dir.exists(wav.samples) &
!dir.exists(file.path(orig.wav.folder, wav.samples)))
dir.create(file.path(orig.wav.folder, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(file.path(orig.wav.folder,
grep(stringr::str_sub(wav,start=0, end = -5),
raven.tables, value=T)), h=T, sep="\t")
# Calculate duration (delta time)
raven.temp$Delta.Time <- raven.temp$End.Time..s.-raven.temp$Begin.Time..s.
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- tuneR::readWave(file.path(orig.wav.folder, wav), units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i &
raven.temp$View=="Waveform 1"] -
raven.temp$Delta.Time[
raven.temp$Selection== i &
raven.temp$View=="Waveform 1"]*0.1,
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i &
raven.temp$View=="Waveform 1"] +
raven.temp$Delta.Time[
raven.temp$Selection== i &
raven.temp$View=="Waveform 1"]*1.2)
if(dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename=file.path(wav.samples, ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep="")))) }
if(!dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav.folder, wav.samples,
ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep=""))))  }
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables)
} # end function
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav, wav.samples = wav.at)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
library(SoundShape)
#library(seewave)
library(tuneR)
# Create temporary folder to store original ".wav" files containing multiple units
orig.wav <- file.path(base::tempdir(), "original wave")
if(!dir.exists(orig.wav)) dir.create(orig.wav)
# Create temporary folder to store sample ".wav" files from original recordings
wav.at <- file.path(base::tempdir(), "wav samples")
if(!dir.exists(wav.at)) dir.create(wav.at)
# Create temporary folder to store results
store.at <- file.path(base::tempdir(), "output")
if(!dir.exists(store.at)) dir.create(store.at)
orig.wav
# Export original sample ".wav" files from SoundShape examples
writeWave(centralis, filename = file.path(orig.wav, "centralis.wav"), extensible = T)
writeWave(cuvieri, filename = file.path(orig.wav, "cuvieri.wav"), extensible = T)
writeWave(kroyeri, filename = file.path(orig.wav, "kroyeri.wav"), extensible = T)
# Store Raven Pro selection tables at same folder from original ".wav" files
for(i in 1:length(raven.list)){
write.table(raven.list[i], file=file.path(orig.wav, names(raven.list)[i]),
quote=F, sep="\t", row.names = F, col.names = colnames(raven.list[[i]]))  } # end loop
# Verify if folder has both original ".wav" files and Raven's selections
dir(orig.wav)
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav, wav.samples = wav.at)
# Verify samples
dir(wav.at)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
# Verify alignment using analysis.type = "twoDshape"
eigensound(analysis.type = "twoDshape", wav.at = file.path(wav.at, "Aligned"), dBlevel = 25, store.at=store.at, plot.exp=TRUE, flim=c(0, 4), tlim=c(0, 0.8), add.contour = T)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
