# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(raven, h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 20% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.2  } # max.dur
# Create folder to store sample wav files
if(!dir.exists(file.path(orig.wav, wav.samples)))
dir.create(file.path(orig.wav, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(grep(str_sub(wav,start=0, end = -5),
raven.tables, value=T), h=T, sep="\t")
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- readWave(wav, units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"],
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"]+
max.dur)
writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav, wav.samples,
paste(str_sub(wav,start=0, end = -5),
" - sample ", i, ".wav", sep="")))
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
}
orig.wav = "C:/Users/n10832777/Downloads"
if(is.null(orig.wav)) {stop("Use 'orig.wav' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav, pattern=".wav")
wav.files
raven.at=orig.wav
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
raven.tables
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(raven, h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 20% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.2  } # max.dur
max.dur=NULL
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 20% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.2  } # max.dur
max.dur
file.path(orig.wav, wav.samples)
wav.samples="wav samples"
file.path(orig.wav, wav.samples)
!dir.exists(file.path(orig.wav, wav.samples))
dir.exists(file.path(orig.wav, wav.samples))
# Create folder to store sample wav files
if(!dir.exists(file.path(orig.wav, wav.samples)))
wav.files
wav.files
raven.tables
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(grep(str_sub(wav,start=0, end = -5),
raven.tables, value=T), h=T, sep="\t")
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- readWave(wav, units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"],
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"]+
max.dur)
writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav, wav.samples,
paste(str_sub(wav,start=0, end = -5),
" - sample ", i, ".wav", sep="")))
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
raven.to.wave <- function(
orig.wav=NULL,
raven.at=orig.wav,
wav.samples="wav samples",
max.dur=NULL
){
if(is.null(orig.wav)) {stop("Use 'orig.wav' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(raven, h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 20% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.2  } # max.dur
# Create folder to store sample wav files
if(!dir.exists(file.path(orig.wav, wav.samples)))
dir.create(file.path(orig.wav, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(grep(str_sub(wav,start=0, end = -5),
raven.tables, value=T), h=T, sep="\t")
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- readWave(wav, units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"],
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"]+
max.dur)
writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav, wav.samples,
paste(str_sub(wav,start=0, end = -5),
" - sample ", i, ".wav", sep="")))
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
}
raven.to.wave(orig.wav = "C:/Users/n10832777/Downloads")
stringr::str_sub
library(roxygen2)
library(devtools)
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
warnings()
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("vctrs")
install.packages("stringi")
remove.packages("stringi")
library(stringi)
install.packages("stringi")
library(stringi)
install.packages("stringi")
install.packages("Rcpp")
install.packages("utf8")
install.packages("colorspace")
install.packages("fansi")
install.packages("fs")
install.packages("xfun")
install.packages("digest")
install.packages("jsonlite")
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
library(roxygen2)
library(devtools)
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
install.packages("tuneR")
install.packages("tuneR")
install.packages("tuneR")
library(roxygen2)
library(devtools)
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
library(SoundShape)
SoundShape
?SoundShape
# Build package
build("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel/SoundShape_1.3.0.tar.gz")
dir()
dir(
"C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data")
dir(
"C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data")
# List tables
raven.tables <- dir(getwd(), pattern = "selections.txt")
read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T)
raven.tables[1]
# List tables
raven.tables <- dir("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data", pattern = "selections.txt")
read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T)
# List tables
raven.tables <- dir("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data", pattern = "selections.txt", full.names = T)
read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T)
raven.list <- list(read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T),
read.table(raven.tables[2], h=T, sep="\t", stringsAsFactors = T))
raven.list
raven.list <- list(read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T),
read.table(raven.tables[2], h=T, sep="\t", stringsAsFactors = T),
read.table(raven.tables[3], h=T, sep="\t", stringsAsFactors = T))
?list
names(raven.list) <- raven.tables
raven.list
names(raven.list) <- dir("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data", pattern = "selections.txt")
names(raven.list)
raven.list
raven.list$centralis.Table.1.selections.txt
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development)
# List tables
raven.tables <- dir("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data", pattern = "selections.txt", full.names = T)
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
write.table(raven.list$centralis.Table.1.selections.txt, h=T, sep="\t")
write.table(raven.list$centralis.Table.1.selections.txt, sep="\t")
?write.table
names(raven.list$centralis.Table.1.selections.txt)
names(raven.list)[1]
length(raven.list)
write.table(raven.list[1],file=file.path(getwd(), names(raven.list)[1]),sep="\t")
write.table(raven.list[1],file=file.path(getwd(), names(raven.list)[1]))
write.table(raven.list[1],file=file.path(getwd(), names(raven.list)[1]),sep="\t", row.names = F)
write.table(raven.list[1],file=file.path(getwd(), names(raven.list)[1]),sep="\t", row.names = F, col.names = F)
names(raven.list)[1]
colnames(raven.list)[1]
colnames(raven.list)
colnames(raven.list$centralis.Table.1.selections.txt)
colnames(raven.list$centralis.Table.1.selections.txt)[1]
colnames(raven.list)[1]
colnames(raven.list)[[1]]
raven.list[1]
colnames(raven.list[1])
raven.list[1]
raven.list[1]
raven.list[[1]]
colnames(raven.list[[1]])
write.table(raven.list[1],file=file.path(getwd(), names(raven.list)[1]),sep="\t", row.names = F, col.names = colnames(raven.list[[1]]))
as.factor(colnames(raven.list[[1]]))
write.table(raven.list[1],file=file.path(getwd(), names(raven.list)[1]),sep="\t", row.names = F, col.names = as.factor(colnames(raven.list[[1]])))
as.factor(colnames(raven.list[[1]]))
raven.list[1]
raven.list[[1]]
names(raven.list)[1]
write.table(raven.list[[1]], file=file.path(getwd(), names(raven.list)[1]),
sep="\t", row.names = F, col.names = as.factor(colnames(raven.list[[1]])))
raven.list[[1]]
summary(raven.list[[1]])
write.table(raven.list[[1]], file=file.path(getwd(), names(raven.list)[1]),
sep="\t", row.names = T, col.names = as.factor(colnames(raven.list[[1]])))
as.factor(colnames(raven.list[[1]]))
colnames(raven.list[[1]])
names(raven.list[[1]])
write(raven.list[[1]], file=file.path(getwd(), names(raven.list)[1]),
sep="\t")
ncol(raven.list[[1]])
write(raven.list[[1]], file=file.path(getwd(), names(raven.list)[1]),
sep="\t", ncolumns = ncol(raven.list[[1]]))
write(raven.list[1], file=file.path(getwd(), names(raven.list)[1]),
sep="\t", ncolumns = ncol(raven.list[[1]]))
write.table(raven.list$centralis.Table.1.selections.txt,
file=file.path(getwd(), names(raven.list)[1]),
sep="\t", row.names = F)
write.csv(raven.list[[1]], file=file.path(getwd(), paste(names(raven.list)[1], ".csv", sep="")),
sep="\t", row.names = F)
write.table(raven.list[[1]], file=file.path(getwd(), names(raven.list)[1]),
sep="\t", row.names = F, quote=F)
write.table(raven.list[[1]], file=file.path(getwd(), names(raven.list)[1]),
sep="\t", row.names = F, quote=F, col.names = F)
write.table(raven.list[[1]], file=file.path(getwd(), names(raven.list)[1]),
sep="\t", row.names = F, quote=F, col.names = names(raven.list[[1]]))
read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T)
?read.table
read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T)
read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T, colClasses = "factor")
read.table(raven.tables[1], h=F, sep="\t", stringsAsFactors = T, colClasses = "factor")
read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T, colClasses = "factor")
read.table(raven.tables[1], h=F, sep="\t", stringsAsFactors = T, colClasses = "factor")
raven.list <- list(read.table(raven.tables[1], h=F, sep="\t", stringsAsFactors = T),
read.table(raven.tables[2], h=F, sep="\t", stringsAsFactors = T),
read.table(raven.tables[3], h=F, sep="\t", stringsAsFactors = T))
raven.list
raven.list <- list(read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T),
read.table(raven.tables[2], h=T, sep="\t", stringsAsFactors = T),
read.table(raven.tables[3], h=T, sep="\t", stringsAsFactors = T))
raven.list
read.table(raven.tables[1], h=F, sep="\t", stringsAsFactors = T)[1,]
colnames(raven.list) <- read.table(raven.tables[1], h=F, sep="\t", stringsAsFactors = T)[1,]
colnames(raven.list[1]) <- read.table(raven.tables[1], h=F, sep="\t", stringsAsFactors = T)[1,]
colnames(raven.list[[1]]) <- read.table(raven.tables[1], h=F, sep="\t", stringsAsFactors = T)[1,]
raven.list[[1]]
read.table(raven.tables[1], h=F, sep="\t", stringsAsFactors = T)[1,]
read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T)[1,]
colnames(raven.list[[1]]) <-
read.table(raven.tables[1], h=F, sep="\t", stringsAsFactors = T)[1,]
read.table(raven.tables[1], h=F, sep="\t", stringsAsFactors = T)[1,]
raven.list <- list(read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T),
read.table(raven.tables[2], h=T, sep="\t", stringsAsFactors = T),
read.table(raven.tables[3], h=T, sep="\t", stringsAsFactors = T))
names(raven.list) <- dir("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data", pattern = "selections.txt")
raven.list$centralis.Table.1.selections.txt
write.table(raven.list$centralis.Table.1.selections.txt,
file=file.path(getwd(), names(raven.list)[1]),
sep="\t", row.names = F, col.names = c("Selection",
"View",
"Channel",
"Begin Time (s)",
"End Time (s)",
"Low Freq (Hz)",
"High Freq (Hz)",
"Begin File"))
write.table(raven.list$centralis.Table.1.selections.txt,
file=file.path(getwd(), names(raven.list)[1]), quote=F,
sep="\t", row.names = F, col.names = c("Selection",
"View",
"Channel",
"Begin Time (s)",
"End Time (s)",
"Low Freq (Hz)",
"High Freq (Hz)",
"Begin File"))
write.table(raven.list[1],
file=file.path(getwd(), names(raven.list)[1]), quote=F,
sep="\t", row.names = F, col.names = c("Selection",
"View",
"Channel",
"Begin Time (s)",
"End Time (s)",
"Low Freq (Hz)",
"High Freq (Hz)",
"Begin File"))
write.table(raven.list[1], file=file.path(getwd(), names(raven.list)[1]), quote=F,
sep="\t", row.names = F,
col.names = c("Selection", "View", "Channel",
"Begin Time (s)", "End Time (s)", "Low Freq (Hz)",
"High Freq (Hz)", "Begin File"))
# List tables
raven.tables <- dir("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data", pattern = "selections.txt", full.names = T)
raven.list <- list(read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T),
read.table(raven.tables[2], h=T, sep="\t", stringsAsFactors = T),
read.table(raven.tables[3], h=T, sep="\t", stringsAsFactors = T))
names(raven.list) <- dir("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data", pattern = "selections.txt")
raven.list
colnames(raven.list[1]) <- c("Selection", "View", "Channel",
"Begin Time (s)", "End Time (s)", "Low Freq (Hz)",
"High Freq (Hz)", "Begin File")
colnames(raven.list[[1]]) <- c("Selection", "View", "Channel",
"Begin Time (s)", "End Time (s)", "Low Freq (Hz)",
"High Freq (Hz)", "Begin File")
raven.list
colnames(raven.list) <- c("Selection", "View", "Channel",
"Begin Time (s)", "End Time (s)", "Low Freq (Hz)",
"High Freq (Hz)", "Begin File")
colnames(raven.list[[i]]) <- c("Selection", "View", "Channel",
"Begin Time (s)", "End Time (s)", "Low Freq (Hz)",
"High Freq (Hz)", "Begin File")
for(i in 1:length(raven.list)){
colnames(raven.list[[i]]) <- c("Selection", "View", "Channel",
"Begin Time (s)", "End Time (s)", "Low Freq (Hz)",
"High Freq (Hz)", "Begin File")
} # Loop - Fix names
for(i in 1:length(raven.list)){ colnames(raven.list[[i]]) <-
c("Selection", "View", "Channel", "Begin Time (s)",
"End Time (s)", "Low Freq (Hz)", "High Freq (Hz)", "Begin File")
} # Loop - Fix names
raven.list
write.table(raven.list[1], file=file.path(getwd(), names(raven.list)[1]), quote=F,
sep="\t", row.names = F)
colnames(raven.list[1])
colnames(raven.list[[1]])
write.table(raven.list[1], file=file.path(getwd(), names(raven.list)[1]), quote=F,
sep="\t", row.names = F, col.names = colnames(raven.list[[1]]))
# Export RData containing list of Raven tables
save(raven.list, file="C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data/raven.list.Rdata", compress = "xz")
write.table(raven.list[i], file=file.path(getwd(), names(raven.list)[i]), quote=F,
sep="\t", row.names = F, col.names = colnames(raven.list[[i]]))  } # end loop
# Export Raven Tables
for(i in 1:length(raven.list)){
write.table(raven.list[i], file=file.path(getwd(), names(raven.list)[i]), quote=F,
sep="\t", row.names = F, col.names = colnames(raven.list[[i]]))  } # end loop
library(SoundShape)
library(roxygen2)
library(devtools)
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Build package
build("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Build package
build("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel/SoundShape_1.3.0.tar.gz")
library(SoundShape)
?raven.to.wave()
data(raven.list)
library(roxygen2)
library(devtools)
?`SoundShape-package`
raven.list
data(raven.list)
## Import Raven tables
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# List tables
raven.tables <- dir("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data", pattern = "selections.txt", full.names = T)
raven.list <- list(read.table(raven.tables[1], h=T, sep="\t", stringsAsFactors = T),
read.table(raven.tables[2], h=T, sep="\t", stringsAsFactors = T),
read.table(raven.tables[3], h=T, sep="\t", stringsAsFactors = T))
# Name elements according to txt file name
names(raven.list) <- dir("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data", pattern = "selections.txt")
# Fix column names to match originals from Raven
for(i in 1:length(raven.list)){ colnames(raven.list[[i]]) <-
c("Selection", "View", "Channel", "Begin Time (s)",
"End Time (s)", "Low Freq (Hz)", "High Freq (Hz)", "Begin File")
} # Loop - Fix names
# Export RData containing list of Raven tables
save(raven.list, file="C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data/raven.list.Rdata", compress = "xz")
raven.list
class(raven.list)
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
library(SoundShape)
?raven.to.wave()
load("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape original data/raven.list.Rdata")
raven.tables
raven.list
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
