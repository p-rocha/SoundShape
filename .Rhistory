tuneR::writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav, wav.samples,
paste(stringr::str_sub(wav,start=0, end = -5),
" - sample ", i, ".wav", sep="")))
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
} # end function
# Verify if folder has both original ".wav" files and Raven's selections
dir(orig.wav)
?dir.create()
unlink(orig.wav)
orig.wav
dir(orig.wav)
dir(file.path(orig.wav, "wav samples"))
dir.exists(file.path(orig.wav, "wav samples"))
raven.to.wave(orig.wav=orig.wav)
raven.to.wave(orig.wav=orig.wav)
dir(file.path(orig.wav, "wav samples"))
i=1
paste(stringr::str_sub(wav.files[1],start=0, end = -5),
" - sample ", i, ".wav", sep="")
ifelse(i<10,
paste(stringr::str_sub(wav.files[1],start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav.files[1],start=0, end = -5),
"_sample-", i, ".wav", sep=""))
i=10
ifelse(i<10,
paste(stringr::str_sub(wav.files[1],start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav.files[1],start=0, end = -5),
"_sample-", i, ".wav", sep=""))
i=100
ifelse(i<10,
paste(stringr::str_sub(wav.files[1],start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav.files[1],start=0, end = -5),
"_sample-", i, ".wav", sep=""))
i=9
ifelse(i<10,
paste(stringr::str_sub(wav.files[1],start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav.files[1],start=0, end = -5),
"_sample-", i, ".wav", sep=""))
raven.to.wave <- function(orig.wav=NULL, raven.at=orig.wav, wav.samples="wav samples", max.dur=NULL){
if(is.null(orig.wav)) {stop("Use 'orig.wav' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(file.path(raven.at, raven),
h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 20% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.2  } # max.dur
# Create folder to store sample wav files
if(!dir.exists(file.path(orig.wav, wav.samples)))
dir.create(file.path(orig.wav, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(file.path(orig.wav,
grep(stringr::str_sub(wav,start=0, end = -5),
raven.tables, value=T)), h=T, sep="\t")
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- tuneR::readWave(file.path(orig.wav, wav), units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"],
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"]+
max.dur)
tuneR::writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav, wav.samples,
ifelse(i<10,
paste(stringr::str_sub(wav.files[i],start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav.files[i],start=0, end = -5),
"_sample-", i, ".wav", sep=""))))
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
} # end function
dir(file.path(orig.wav, "wav samples"))
raven.to.wave(orig.wav=orig.wav)
dir(file.path(orig.wav, "wav samples"))
raven.to.wave <- function(orig.wav=NULL, raven.at=orig.wav, wav.samples="wav samples", max.dur=NULL){
if(is.null(orig.wav)) {stop("Use 'orig.wav' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(file.path(raven.at, raven),
h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 20% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.2  } # max.dur
# Create folder to store sample wav files
if(!dir.exists(file.path(orig.wav, wav.samples)))
dir.create(file.path(orig.wav, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(file.path(orig.wav,
grep(stringr::str_sub(wav,start=0, end = -5),
raven.tables, value=T)), h=T, sep="\t")
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- tuneR::readWave(file.path(orig.wav, wav), units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"],
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"]+
max.dur)
tuneR::writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav, wav.samples,
ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep=""))))
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
} # end function
raven.to.wave(orig.wav=orig.wav)
dir(file.path(orig.wav, "wav samples"))
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Create temporary folder to store ".wav" files
orig.wav <- file.path(base::tempdir(), "original wave")
dir.exists(orig.wav)
# Create temporary folder to store ".wav" files
orig.wav <- file.path(base::tempdir(), "original wave")
if(!dir.exists(orig.wav)) dir.create(orig.wav)
dir.exists(orig.wav)
# Create temporary folder to store results
store.at <- file.path(base::tempdir(), "output")
if(!dir.exists(store.at)) dir.create(store.at)
# Export original sample ".wav" files from SoundShape examples
writeWave(centralis, filename = file.path(orig.wav, "centralis.wav"), extensible = T)
library(tuneR)
# Export original sample ".wav" files from SoundShape examples
writeWave(centralis, filename = file.path(orig.wav, "centralis.wav"), extensible = T)
writeWave(cuvieri, filename = file.path(orig.wav, "cuvieri.wav"), extensible = T)
library(SoundShape)
# Export original sample ".wav" files from SoundShape examples
writeWave(centralis, filename = file.path(orig.wav, "centralis.wav"), extensible = T)
writeWave(cuvieri, filename = file.path(orig.wav, "cuvieri.wav"), extensible = T)
writeWave(kroyeri, filename = file.path(orig.wav, "kroyeri.wav"), extensible = T)
# Export Raven Pro selection tables from SoundShape examples
for(i in 1:length(raven.list)){
write.table(raven.list[i], file=file.path(orig.wav, names(raven.list)[i]),
quote=F, sep="\t", row.names = F, col.names = colnames(raven.list[[i]]))  } # end loop
# Verify if folder has both original ".wav" files and Raven's selections
dir(orig.wav)
raven.to.wave(orig.wav=orig.wav)
dir(file.path(orig.wav, "wav samples"))
library(SoundShape)
library(seewave)
library(tuneR)
# Create temporary folder to store ".wav" files
orig.wav <- file.path(base::tempdir(), "original wave")
if(!dir.exists(orig.wav)) dir.create(orig.wav)
dir.exists(orig.wav)
# Create temporary folder to store sample ".wav" files containing one acoustic unit
wav.at <- file.path(base::tempdir(), "sample wave")
if(!dir.exists(wav.at)) dir.create(wav.at)
# Create temporary folder to store results
store.at <- file.path(base::tempdir(), "output")
if(!dir.exists(store.at)) dir.create(store.at)
# Export original sample ".wav" files from SoundShape examples
writeWave(centralis, filename = file.path(orig.wav, "centralis.wav"), extensible = T)
writeWave(cuvieri, filename = file.path(orig.wav, "cuvieri.wav"), extensible = T)
writeWave(kroyeri, filename = file.path(orig.wav, "kroyeri.wav"), extensible = T)
dir(orig.wav)
# Store Raven Pro selection tables at same folder from original ".wav" files
for(i in 1:length(raven.list)){
write.table(raven.list[i], file=file.path(orig.wav, names(raven.list)[i]),
quote=F, sep="\t", row.names = F, col.names = colnames(raven.list[[i]]))  } # end loop
# Verify if folder has both original ".wav" files and Raven's selections
dir(orig.wav)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
library(SoundShape)
library(SoundShape)
library(seewave)
library(tuneR)
?raven.to.wave
# Create temporary folder to store sample ".wav" files containing one acoustic unit
wav.at <- file.path(base::tempdir(), "wav samples")
if(!dir.exists(wav.at)) dir.create(wav.at)
# Create temporary folder to store original ".wav" files containing multiple units
orig.wav <- file.path(base::tempdir(), "original wave")
if(!dir.exists(orig.wav)) dir.create(orig.wav)
# Create temporary folder to store results
store.at <- file.path(base::tempdir(), "output")
if(!dir.exists(store.at)) dir.create(store.at)
# Export original sample ".wav" files from SoundShape examples
writeWave(centralis, filename = file.path(orig.wav, "centralis.wav"), extensible = T)
writeWave(cuvieri, filename = file.path(orig.wav, "cuvieri.wav"), extensible = T)
writeWave(kroyeri, filename = file.path(orig.wav, "kroyeri.wav"), extensible = T)
# Store Raven Pro selection tables at same folder from original ".wav" files
for(i in 1:length(raven.list)){
write.table(raven.list[i], file=file.path(orig.wav, names(raven.list)[i]),
quote=F, sep="\t", row.names = F, col.names = colnames(raven.list[[i]]))  } # end loop
# Verify if folder has both original ".wav" files and Raven's selections
dir(orig.wav)
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav)
# Verify samples
dir(file.path(orig.wav, "wav samples"))
wav.at
dir(wav.at)
wav.at
file.path(orig.wav, "wav samples")
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav, wav.samples = wav.at)
class(wav.at)
wav.samples="wav samples"
wav.at
dir.exists(wav.at)
dir.exists("wav samples")
wav.samples=wav.at
wav.at
wav.at="C:\\Users\\N10832~1\\AppData\\Local\\Temp\\Rtmpgrs8W7/wav samples"
dir.exists(wav.at)
wav.at="wav samples"
wav.samples=wav.at
dir.exists(wav.samples)
dir.exists(wav.samples)
!dir.exists(wav.samples)
dir.exists(file.path(orig.wav.folder, wav.samples)
)
orig.wav.folder = orig.wav
!dir.exists(file.path(orig.wav.folder, wav.samples))
file.path(orig.wav.folder, wav.samples)
dir.exists(file.path(orig.wav.folder, wav.samples))
if(!dir.exists(wav.samples) |
!dir.exists(file.path(orig.wav.folder, wav.samples))) {print("hello")}
if(!dir.exists(wav.samples) &
!dir.exists(file.path(orig.wav.folder, wav.samples))) {print("hello")}
wav.samples
dir.exists(wav.samples)
!dir.exists(wav.samples)
wav.at="wav samples"
wav.samples=wav.at
dir.exists(wav.samples)
!dir.exists(wav.samples)
!dir.exists(file.path(orig.wav.folder, wav.samples))
wav.at="C:\\Users\\N10832~1\\AppData\\Local\\Temp\\Rtmpgrs8W7/wav samples"
wav.samples=wav.at
dir.exists(wav.samples)
!dir.exists(wav.samples)
!dir.exists(file.path(orig.wav.folder, wav.samples))
wav.at="wav sampled"
wav.samples=wav.at
!dir.exists(wav.samples)
!dir.exists(file.path(orig.wav.folder, wav.samples))
if(!dir.exists(wav.samples) &
!dir.exists(file.path(orig.wav.folder, wav.samples))) {print("hello")}
wav.at="C:\\Users\\N10832~1\\AppData\\Local\\Temp\\Rtmpgrs8W7/wav samplds"
wav.samples=wav.at
!dir.exists(wav.samples)
!dir.exists(file.path(orig.wav.folder, wav.samples))
dir.exists(wav.samples)
wav.at="C:\\Users\\N10832~1\\AppData\\Local\\Temp\\Rtmpgrs8W7/wav samples"
wav.samples=wav.at
dir.exists(wav.samples)
ifelse(dir.exists(wav.samples),
print("wav samples is a file path"),
print("need to create file path"))
ifelse(dir.exists(wav.samples),
print("wav samples is a file path"),
print("need to create file path"))
dir.exists(wav.samples)
if(dir.exists(wav.samples))
print("wav samples is a file path")
print("wav samples is a file path")
if(dir.exists(wav.samples)){print("wav samples is a file path")}
wav.at="wav sampled"
wav.samples=wav.at
if(dir.exists(wav.samples)){print("wav samples is a file path")}
if(!dir.exists(wav.samples)){print("need to create file path")}
raven.to.wave <- function(orig.wav.folder=NULL, raven.at=orig.wav.folder, wav.samples="wav samples", max.dur=NULL){
if(is.null(orig.wav.folder)) {stop("Use 'orig.wav.folder' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav.folder, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(file.path(raven.at, raven),
h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 20% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.2  } # max.dur
# Create folder to store sample wav files
if(!dir.exists(file.path(orig.wav.folder, wav.samples)))
dir.create(file.path(orig.wav.folder, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(file.path(orig.wav.folder,
grep(stringr::str_sub(wav,start=0, end = -5),
raven.tables, value=T)), h=T, sep="\t")
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- tuneR::readWave(file.path(orig.wav.folder, wav), units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"],
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"]+
max.dur)
if(dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename=file.path(wav.samples, ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep="")))) }
if(!dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav.folder, wav.samples,
ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep=""))))  }
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
} # end function
# Create temporary folder to store original ".wav" files containing multiple units
orig.wav <- file.path(base::tempdir(), "original wave")
if(!dir.exists(orig.wav)) dir.create(orig.wav)
# Create temporary folder to store sample ".wav" files containing one acoustic unit
wav.at <- file.path(base::tempdir(), "wav samples")
if(!dir.exists(wav.at)) dir.create(wav.at)
# Create temporary folder to store results
store.at <- file.path(base::tempdir(), "output")
if(!dir.exists(store.at)) dir.create(store.at)
# Verify if folder has both original ".wav" files and Raven's selections
dir(orig.wav)
wav.at
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav, wav.samples = wav.at)
raven.to.wave
raven.to.wave <- function(orig.wav.folder=NULL, raven.at=orig.wav.folder, wav.samples="wav samples", max.dur=NULL){
if(is.null(orig.wav.folder)) {stop("Use 'orig.wav.folder' to specify folder path where original '.wav' files are stored")}
# List ".wav" files
wav.files <- dir(orig.wav.folder, pattern=".wav")
# List Raven tables
raven.tables <- dir(raven.at, pattern="selections.txt")
if(length(raven.tables)==0){
stop("There are no tables containing selections from Raven Pro software at current folder. File path can be specified by either 'wav.at' or 'raven.at', and files must end with 'selections.txt'  files. Use 'help(raven.to.wav)' for more information")
}
if(length(raven.tables)!=length(wav.files)){
warning("Number of selection tables from Raven Pro software differ from number of '.wav' files at folder specified by 'wav.at'. Some files may not have been analysed.")
}
# Import Raven tables
raven.selections <- data.frame()
for(raven in raven.tables){
raven.temp <- read.table(file.path(raven.at, raven),
h=T, sep="\t", stringsAsFactors = T)
raven.selections <- rbind(raven.selections, raven.temp)
rm(raven.temp)
} # import raven tables loop
# Use delta time for maximum duration
if(is.null(max.dur)){
#longest acoustic unit plus 20% of longest duration
max.dur <- max(raven.selections$End.Time..s.-raven.selections$Begin.Time..s.)*1.2  } # max.dur
# Create folder to store sample wav files
if(!dir.exists(wav.samples) &
!dir.exists(file.path(orig.wav.folder, wav.samples)))
dir.create(file.path(orig.wav.folder, wav.samples))
# For each wav file, use Raven selections to create new files
for(wav in wav.files){
raven.temp <- read.table(file.path(orig.wav.folder,
grep(stringr::str_sub(wav,start=0, end = -5),
raven.tables, value=T)), h=T, sep="\t")
for(i in 1:length(raven.temp$Selection[raven.temp$View=="Waveform 1"])){
wav.temp <- tuneR::readWave(file.path(orig.wav.folder, wav), units="seconds",
from= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"],
to= raven.temp$Begin.Time..s.[
raven.temp$Selection== i & raven.temp$View=="Waveform 1"]+
max.dur)
if(dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename=file.path(wav.samples, ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep="")))) }
if(!dir.exists(wav.samples)){
tuneR::writeWave(wav.temp, extensible = T,
filename = file.path(orig.wav.folder, wav.samples,
ifelse(i<10,
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-0", i, ".wav", sep=""),
paste(stringr::str_sub(wav,start=0, end = -5),
"_sample-", i, ".wav", sep=""))))  }
rm(wav.temp)
} # end loop - for each selection
rm(raven.temp)
} # end loop - for each wav file
rm(wav.files, raven.tables, raven.selections)
} # end function
# Export a ".wav" sample for each selection made in Raven Pro
raven.to.wave(orig.wav.folder = orig.wav, wav.samples = wav.at)
dir(wav.at)
# Verify samples
dir(file.path(orig.wav, "wav samples"))
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
# Install package directly
install("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
library(roxygen2)
library(devtools)
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development")
# Process documentation (each function edited manually)
document("C:/Users/n10832777/OneDrive - Queensland University of Technology/R/SoundShape - Package development/SoundShape-devel")
