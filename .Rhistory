document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(SoundShape)
library(seewave)
library(tuneR)
wav.at <- base::tempdir()
wav.at <- base::tempdir()
store.at <- file.path(wav.at, "output")
file.path(base::tempdir(), "original wave")
wav.at <- file.path(base::tempdir(), "original wave")
if(!dir.exists(wav.at)) dir.create(wav.at)
store.at <- file.path(wav.at, "output")
if(!dir.exists(store.at)) dir.create(store.at)
store.at <- file.path(base::tempdir(), "output")
if(!dir.exists(store.at)) dir.create(store.at)
# cuvieri
cut.cuv1 <- seewave::cutw(cuvieri, f=44100, from=0.05, to=0.45, output = "Wave")
cut.cuv2 <- seewave::cutw(cuvieri, f=44100, from=0.73, to=1.13, output = "Wave")
cut.cuv3 <- seewave::cutw(cuvieri, f=44100, from=1.47, to=1.87, output = "Wave")
# centralis
cut.cent1 <- seewave::cutw(centralis, f=44100, from=0.0, to=0.8, output = "Wave")
cut.cent2 <- seewave::cutw(centralis, f=44100, from=1.08, to=1.78, output = "Wave")
cut.cent3 <- seewave::cutw(centralis, f=44100, from=2.1, to=2.8, output = "Wave")
# kroyeri
cut.kro1 <- seewave::cutw(kroyeri, f=44100, from=0.16, to=0.96, output = "Wave")
cut.kro2 <- seewave::cutw(kroyeri, f=44100, from=1.55, to=2.35, output = "Wave")
cut.kro3 <- seewave::cutw(kroyeri, f=44100, from=2.9, to=3.8, output = "Wave")
# Export new wave files containing acoustic units and store on previosly created folder
tuneR::writeWave(cut.cuv1, filename = file.path(wav.at, "cut.cuv1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv2, filename = file.path(wav.at, "cut.cuv2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cuv3, filename = file.path(wav.at, "cut.cuv3.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent1, filename = file.path(wav.at, "cut.cent1.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent2, filename = file.path(wav.at, "cut.cent2.wav"), extensible = FALSE)
tuneR::writeWave(cut.cent3, filename = file.path(wav.at, "cut.cent3.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro1, filename = file.path(wav.at, "cut.kro1.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro2, filename = file.path(wav.at, "cut.kro2.wav"), extensible = FALSE)
tuneR::writeWave(cut.kro3, filename = file.path(wav.at, "cut.kro3.wav"), extensible = FALSE)
# Place sounds at the beginning of a sound window
align.wave(wav.at=wav.at, wav.to="Aligned", time.length = 0.8, time.perc = 0.005, dBlevel = 25)
# Verify alignment using analysis.type = "twoDshape"
eigensound(analysis.type = "twoDshape", wav.at = file.path(wav.at, "Aligned"), dBlevel = 25, store.at=store.at, plot.exp=TRUE, flim=c(0, 4), tlim=c(0, 0.8), add.contour = T)
# cuvieri sample (see code chunks above)
al.cuv <- tuneR::readWave(file.path(wav.at, "Aligned", "cut.cuv1.wav"))
# Compute spectrogram data
s.cuv <- seewave::spectro(al.cuv, flim=c(0, 4), tlim = c(0, 0.8),
grid=F, f=44100, wl=512, ovlp=70, cont=TRUE,
contlevels = seq(-25, -25, 1), collevels = seq(-40, 0, 0.1))
# Prevent graphical errors in R
dev.off()
# Create 3D spectrogram
threeDspectro(al.cuv, dBlevel=40, flim=c(0, 4), tlim=c(0, 0.8))
# Set background at -40 dB and remove -Inf values from spectrogram data
for(i in 1:length(s.cuv$amp)){if(s.cuv$amp[i] == -Inf |s.cuv$amp[i] <= -40)
{s.cuv$amp[i] <- -40}}
# Add curve of relative amplitude
plot3D::contour3D(x=s.cuv$time, y=s.cuv$freq, colvar=t(s.cuv$amp), z=-25,
plot=T, add=T, addbox = F, col="black", lwd=1.9, nlevels=2, dDepth=0.25)
# Create "Wave" object from aligned ".wav" file
al.samp <- tuneR::readWave(file.path(wav.at, "Aligned", "cut.kro1.wav"))
# Compute spectrogram data using standardized parameters and window dimensions
s.samp <- seewave::spectro(al.samp, f=44100, wl=512, ovlp=70,
flim=c(0,4), tlim = c(0,0.8), plot=FALSE)
# rows (y-axis)
nrow(s.samp$amp)
# columns (x-axis)
ncol(s.samp$amp)
# Using threeDspectro to visualize sampling grid
par(mfrow=c(1,2)) # view side by side
oldpar <- graphics::par(no.readonly = TRUE)
# Using threeDspectro to visualize sampling grid
par(mfrow=c(1,2)) # view side by side
# As "surface"
threeDspectro(al.samp, samp.grid=TRUE, x.length=70, y.length=47, plot.type="surface",
main="As 'surface'", f=44100, wl=512, ovlp=70, flim=c(0,4), tlim = c(0,0.8), dBlevel=25)
# As "points"
threeDspectro(al.samp, samp.grid=TRUE, x.length=70, y.length=47, plot.type="points",
main="As 'points'", f=44100, wl=512, ovlp=70, flim=c(0,4), tlim = c(0,0.8), dBlevel=25)
par(oldpar)
# Sample semilandmarks for each ".wav" file on a folder
eig.sample.linear <- eigensound(analysis.type="threeDshape", dBlevel=25, plot.exp=TRUE,
f=44100, wl=512, ovlp=70, flim=c(0, 4), tlim=c(0, 0.8),
x.length=70, y.length=47, log.scale=FALSE,
wav.at=file.path(wav.at, "Aligned"), store.at=store.at)
# Export 3D graphs with semilandmarks as colored points for inspection
eigensound(analysis.type="threeDshape", dBlevel=25, plot.exp=TRUE,
f=44100, wl=512, ovlp=70, flim=c(0, 4), tlim=c(0, 0.8),
x.length=70, y.length=47, log.scale=FALSE,
wav.at=file.path(wav.at, "Aligned"), store.at=store.at, plot.type="points")
# Sample semilandmarks for each ".wav" file on a folder
eig.sample <- eigensound(analysis.type="threeDshape", dBlevel=25,
f=44100, wl=512, ovlp=70, flim=c(0, 4), tlim=c(0, 0.8),
x.length=70, y.length=47, log.scale=TRUE,
wav.at=file.path(wav.at, "Aligned"), store.at=store.at, plot.exp=TRUE)
# Export 3D graphs with semilandmarks as colored points for inspection
eigensound(analysis.type="threeDshape", dBlevel=25,
f=44100, wl=512, ovlp=70, flim=c(0, 4), tlim=c(0, 0.8),
x.length=70, y.length=47, log.scale=TRUE,
wav.at=file.path(wav.at, "Aligned"), store.at=store.at, plot.exp=TRUE, plot.type="points")
# Linear grid on the x-axis
pca.linear.sample <- stats::prcomp(geomorph::two.d.array(eig.sample.linear))
# View summary results
summary(pca.linear.sample)
# Logarithmic grid on the x-axis
pca.eig.sample <- stats::prcomp(geomorph::two.d.array(eig.sample))
# View summary results
summary(pca.eig.sample)
# Enable broken stick model to be ploted with screeplot function
library(vegan)
# Broken stick model
par(mfrow=c(1,2)) # view side by side
screeplot(pca.linear.sample, bstick=TRUE, main="linear grid")
screeplot(pca.eig.sample, bstick=TRUE, main="log grid")
par(oldpar)
# Mean shape configuration (consensus)
hypo.surf(eig.sample, plot.exp=TRUE, store.at=store.at,  PC="mean",
flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47)
# Minimum and maximum deformations - Principal Component 1
hypo.surf(eig.sample, plot.exp=TRUE, store.at=store.at,  PC=1,
flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47)
# Minimum and maximum deformations - Principal Component 2
hypo.surf(eig.sample, plot.exp=TRUE, store.at=store.at,  PC=2,
flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47)
# Verify names of acoustic units from sample
dimnames(eig.sample)[[3]]
# Based on those names, create factor to use as groups in subsequent ordination plot
sample.gr <- factor(c(rep("centralis", 3), rep("cuvieri", 3), rep("kroyeri", 3)))
# PCA using three-dimensional semilandmark coordinates
pca.eig.sample <- stats::prcomp(geomorph::two.d.array(eig.sample))
# Ordination plot
pca.plot(pca.eig.sample, groups=sample.gr, conv.hulls=sample.gr,
main="Ordination of PC coordinates", leg=TRUE, leg.pos="bottomright", cex.leg = 0.7)
par(oldpar)
# Ordination plot
pca.plot(pca.eig.sample, groups=sample.gr, conv.hulls=sample.gr,
main="Ordination of PC coordinates", leg=TRUE, leg.pos="bottomright", cex.leg = 0.7)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
threeDspectro(cuvieri, plot.exp=TRUE, store.at = tempdir(), samp.grid=FALSE, tlim=c(0, 0.5), flim=c(0, 4))
tempdir()
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
install.packages("SoundShape")
library(SoundShape)
?`SoundShape-package`
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
Sys.time()
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
library(SoundShape)
?`SoundShape-package`
citation("SoundShape")
install.packages("SoundShape")
install.packages("SoundShape")
library(SoundShape)
citation("SoundShape")
library(devtools)
devtools::install_github("p-rocha/SoundShape")
library(devtools)
devtools::install_github("p-rocha/SoundShape")
library(SoundShape)
citation("SoundShape")
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.9000.tar.gz")
library(SoundShape)
citation("SoundShape")
devtools::install_github("p-rocha/SoundShape")
devtools::install_github("p-rocha/SoundShape")
devtools::install_github("p-rocha/SoundShape")
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(SoundShape)
# Sample data from SoundShape
data(cuvieri)
# Select acoustic unit from sample
cuvieri.cut <- seewave::cutw(cuvieri, f=44100, from = 0.05, to=0.45, output="Wave")
# 3D spectrogram
par(mfrow=c(1,2), mar=c(0,2,1,0))
threeDspectro(cuvieri.cut, flim=c(0, 2.5),
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8, resfac=3)
# Semilandmarks from sampled surface
threeDspectro(cuvieri.cut, flim=c(0, 2.5), plot.type="points",
samp.grid=TRUE, x.length=70, y.length=50, main="Semilandmarks 3D",
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8)
# Traditional oscillogram and spectrogram
par(mfrow=c(1,2), mar=c(4,4,2,1)) # view side by side
seewave::oscillo(cuvieri.cut, title="Oscillogram")
seewave::spectro(cuvieri.cut, flim=c(0, 2.5), grid=FALSE, scale=FALSE, main="Spectrogram")
# Samples of data from SoundShape package
data(cuvieri)
data(centralis)
data(kroyeri)
# Plot spectro from sample and highlight acoustic units
# centralis
seewave::spectro(centralis, flim = c(0, 4), wl=512, f=44100, ovlp=70, grid=FALSE)
graphics::abline(v=c(0.1, 0.8, 1.08, 1.78, 2.1, 2.8), lty=2)
# cuvieri
seewave::spectro(cuvieri, flim = c(0,4), wl=512, f=44100, ovlp=70, grid=FALSE)
graphics::abline(v=c(0.05, 0.45, 0.73, 1.13, 1.47, 1.87), lty=2)
# kroyeri
seewave::spectro(kroyeri, flim = c(0, 4), wl=512, f=44100, ovlp=70, grid=FALSE)
graphics::abline(v=c(0.16, 0.96, 1.55, 2.35, 2.9, 3.8), lty=2)
# Spectrogram plots using standardized sound window dimensions
par(mfrow=c(2,2), mar=c(4,4,2,2))
seewave::spectro(cut.centralis, flim=c(0, 4), tlim=c(0, 0.8), main="data(centralis)",
wl=512, f=44100, ovlp=70, grid=FALSE, scale=FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(SoundShape)
# Sample data from SoundShape
data(cuvieri)
# Select acoustic unit from sample
cuvieri.cut <- seewave::cutw(cuvieri, f=44100, from = 0.05, to=0.45, output="Wave")
# 3D spectrogram
par(mfrow=c(1,2), mar=c(0,2,1,0))
threeDspectro(cuvieri.cut, flim=c(0, 2.5),
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8, resfac=3)
# Semilandmarks from sampled surface
threeDspectro(cuvieri.cut, flim=c(0, 2.5), plot.type="points",
samp.grid=TRUE, x.length=70, y.length=50, main="Semilandmarks 3D",
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8)
# Traditional oscillogram and spectrogram
par(mfrow=c(1,2), mar=c(4,4,2,1)) # view side by side
seewave::oscillo(cuvieri.cut, title="Oscillogram")
seewave::spectro(cuvieri.cut, flim=c(0, 2.5), grid=FALSE, scale=FALSE, main="Spectrogram")
citation("SoundShape")
# Samples of data from SoundShape package
data(cuvieri)
data(centralis)
data(kroyeri)
# Plot spectro from sample and highlight acoustic units
# centralis
seewave::spectro(centralis, flim = c(0, 4), wl=512, f=44100, ovlp=70, grid=FALSE)
graphics::abline(v=c(0.1, 0.8, 1.08, 1.78, 2.1, 2.8), lty=2)
# cuvieri
seewave::spectro(cuvieri, flim = c(0,4), wl=512, f=44100, ovlp=70, grid=FALSE)
graphics::abline(v=c(0.05, 0.45, 0.73, 1.13, 1.47, 1.87), lty=2)
# kroyeri
seewave::spectro(kroyeri, flim = c(0, 4), wl=512, f=44100, ovlp=70, grid=FALSE)
graphics::abline(v=c(0.16, 0.96, 1.55, 2.35, 2.9, 3.8), lty=2)
# Select acoustic units
cut.centralis <- seewave::cutw(centralis, f=44100, from=0, to=0.9, output = "Wave")
cut.cuvieri <- seewave::cutw(cuvieri, f=44100, from=0, to=0.9, output = "Wave")
cut.kroyeri <- seewave::cutw(kroyeri, f=44100, from=0.2, to=1.1, output = "Wave")
# Spectrogram plots using standardized sound window dimensions
par(mfrow=c(2,2), mar=c(4,4,2,2))
seewave::spectro(cut.centralis, flim=c(0, 4), tlim=c(0, 0.8), main="data(centralis)",
wl=512, f=44100, ovlp=70, grid=FALSE, scale=FALSE)
seewave::spectro(cut.cuvieri, flim=c(0, 4), tlim=c(0, 0.8), main="data(cuvieri)",
wl=512, f=44100, ovlp=70, grid=FALSE, scale=FALSE)
seewave::spectro(cut.kroyeri, flim=c(0, 4), tlim=c(0, 0.8), main="data(kroyeri)",
wl=512, f=44100, ovlp=70, grid=FALSE, scale=FALSE)
# 2D spectrogram with curves of relative amplitude at -25 dB
par(mfrow=c(1,2), mar=c(4,4,1,1))
s.kro <- seewave::spectro(cut.kroyeri, flim=c(0, 4), tlim = c(0, 0.8),
grid=F, scale=F, f=44100, wl=512, ovlp=70, cont=TRUE,
contlevels = seq(-25, -25, 1), collevels = seq(-40, 0, 0.1))
# 3D spectrogram (with a lower dBlevel for illustrative purpuses)
threeDspectro(cut.kroyeri, dBlevel=40, flim=c(0, 4), tlim=c(0, 0.8), main="",
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8, resfac=2)
# Set background at -40 dB and remove -Inf values from spectrogram data
for(i in 1:length(s.kro$amp)){if(s.kro$amp[i] == -Inf |s.kro$amp[i] <= -40)
{s.kro$amp[i] <- -40}}
# Add curve of relative amplitude
plot3D::contour3D(x=s.kro$time, y=s.kro$freq, colvar=t(s.kro$amp), z=-25,
plot=T, add=T, addbox=F, col="black", lwd=1.9, nlevels=2, dDepth=0.25)
# Using threeDspectro to visualize sampling grid
par(mfrow=c(1,2), mar=c(1,2,1,0))
# As "surface"
threeDspectro(cut.kroyeri, samp.grid=TRUE, x.length=70, y.length=47, plot.type="surface",
dBlevel=25, flim=c(0, 4), tlim=c(0, 0.8), f=44100, wl=512, ovlp=70, main="As 'surface'",
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8)
# As "points"
threeDspectro(cut.kroyeri, samp.grid=TRUE, x.length=70, y.length=47, plot.type="points",
dBlevel=25, flim=c(0, 4), tlim=c(0, 0.8), f=44100, wl=512, ovlp=70, main="As 'points'",
colkey=list(plot=FALSE), cex.axis=0.4, cex.lab=0.8)
?geomorph::plotTangentSpace()
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# R CMD check
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.1.0000.tar.gz")
