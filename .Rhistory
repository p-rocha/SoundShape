if(is.null(threeD.out))
{stop('Please define threeD.out as an object containing the output of eigensound function with analysis.type="threeDshape')}
if(is.null(PC))
{stop('Choose a Principal Component or "mean" shape configuration to generate hypothetical semilandmark configurations. See help(hypo.surf) for details.')}
ref = geomorph::mshape(threeD.out)
# Use sample as reference for hypothetical surfaces
#data("cuvieri")
# Acquire spectrogram values
e <- seewave::spectro(SoundShape::cuvieri, f=f, wl=wl, ovlp=ovlp, flim=flim, tlim=tlim, plot=F)
# Create new sequences representing the sampling grid
freq.seq <- seq(1, length(e$freq), length=y.length)
ifelse(isTRUE(log.scale),
time.seq <- 10^(seq(log10(1), log10(length(e$time)), length.out = x.length)),#log
time.seq <- seq(1, length(e$time), length.out = x.length)) # linear scale
# Subset original coordinates using new sequences
time.sub <- e$time[time.seq]
freq.sub <- e$freq[freq.seq]
# Mean (consensus) shape configuration
if(is.character(PC)){
if(PC=="mean"){
mean.hPC <- matrix(ref[,3], nrow=y.length, ncol=x.length, byrow = T)
# Export plot
if(plot.exp==TRUE){
if(plot.as == "jpeg"){
grDevices::jpeg(width=4000,height=3500,units="px",res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - Mean shape", ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif"){
grDevices::tiff(width=4000, height=3500, units="px", res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - Mean shape",".tif", sep=""))} # uncompressed images
} # end plot.exp=TRUE
# Mean
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(mean.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab, main="Mean shape", clab=expression('Amplitude'),
colkey=colkey)
if(plot.exp==TRUE){grDevices::dev.off()}
}# end "mean" shape
else{stop('Invalid or misspelled PC argument. Please choose between "mean" (for mean shape configuration) or a number representing the intended Principal Component. See help(hypo.surf) for details.')}
} # end is.character
if(is.numeric(PC)){
PCmax <- PC*2
PCmin <- (PC*2)-1
# Principal Components Analysis (PCA) using point coordinates
PCA.out = stats::prcomp(geomorph::two.d.array(threeD.out))
# Acquisition of hypothetical shapes (codes adapted from geomorph::plotTangentSpace)
pcdata = PCA.out$x
p = dim(threeD.out)[1]
k = dim(threeD.out)[2]
shapes <- shape.names <- NULL
for (i in 1:ncol(pcdata)) {
pcaxis.min <- min(pcdata[, i])
pcaxis.max <- max(pcdata[, i])
pc.min <- pc.max <- rep(0, dim(pcdata)[2])
pc.min[i] <- pcaxis.min
pc.max[i] <- pcaxis.max
pc.min <- as.matrix(pc.min %*% (t(PCA.out$rotation))) +
as.vector(t(ref))
pc.max <- as.matrix(pc.max %*% (t(PCA.out$rotation))) +
as.vector(t(ref))
shapes <- rbind(shapes, pc.min, pc.max)
shape.names <- c(shape.names, paste("PC", i, "min", sep = ""),
paste("PC", i, "max", sep = ""))
}
shapes <- geomorph::arrayspecs(shapes, p, k)
shapes <- lapply(seq(dim(shapes)[3]), function(x) shapes[, , x])
names(shapes) <- shape.names
if(PC > (length(shapes)/2)){
stop('Invalid number of Principal Components')}
# Transform calculated PC into matrix of amplitude values
min.hPC <- matrix(shapes[[PCmin]][,3], nrow=y.length, ncol=x.length, byrow = T)
max.hPC <- matrix(shapes[[PCmax]][,3], nrow=y.length, ncol=x.length, byrow = T)
# Hypothetical sound surfaces for desired Principal Component
if(plot.exp==TRUE){
if(plot.as == "jpeg"){
grDevices::jpeg(width=8000,height=3500,units="px",res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - PC", PC, ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif"){
grDevices::tiff(width=8000, height=3500, units="px", res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - PC", PC,".tif", sep=""))} # uncompressed images
} # end plot.exp=TRUE
graphics::par(mfrow=c(1,2), mar=c(0,2,1,0))
# Minimum
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(min.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab,
clab=expression('Amplitude'), main=paste("PC", PC, " - Minimum", sep=""),
colkey=colkey)
# Maximum
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(max.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab,
clab=expression('Amplitude'), main=paste("PC", PC, " - Maximum", sep=""),
colkey=colkey)
if(plot.exp==TRUE){grDevices::dev.off()}
} # end is.numeric
}
# Minimum and maximum deformations - Principal Component 1
hypo.surf(eig.sample, PC=1, flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47)
hypo.surf <- function(threeD.out=NULL, PC=1, flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47, log.scale=TRUE, f=44100, wl=512, ovlp=70, plot.exp=FALSE, plot.as="jpeg", store.at = getwd(), rotate.Xaxis=60, rotate.Yaxis=40, cex.axis=0.5, cex.lab=0.9, cex.main=1.1, lwd=0.1, xlab="Time", ylab="Frequency", zlab="Amplitude", colkey = list(plot = TRUE, cex.clab = 0.9, cex.axis = 0.8, side = 4, length = 0.8, width = 0.7, labels = TRUE, tick = TRUE, lty = 1, lwd = 1, lwd.ticks = 1))
{
if(is.null(threeD.out))
{stop('Please define threeD.out as an object containing the output of eigensound function with analysis.type="threeDshape')}
if(is.null(PC))
{stop('Choose a Principal Component or "mean" shape configuration to generate hypothetical semilandmark configurations. See help(hypo.surf) for details.')}
ref = geomorph::mshape(threeD.out)
# Use sample as reference for hypothetical surfaces
#data("cuvieri")
# Acquire spectrogram values
e <- seewave::spectro(SoundShape::cuvieri, f=f, wl=wl, ovlp=ovlp, flim=flim, tlim=tlim, plot=F)
# Create new sequences representing the sampling grid
freq.seq <- seq(1, length(e$freq), length=y.length)
ifelse(isTRUE(log.scale),
time.seq <- 10^(seq(log10(1), log10(length(e$time)), length.out = x.length)),#log
time.seq <- seq(1, length(e$time), length.out = x.length)) # linear scale
# Subset original coordinates using new sequences
time.sub <- e$time[time.seq]
freq.sub <- e$freq[freq.seq]
# Mean (consensus) shape configuration
if(is.character(PC)){
if(PC=="mean"){
mean.hPC <- matrix(ref[,3], nrow=y.length, ncol=x.length, byrow = T)
# Export plot
if(plot.exp==TRUE){
if(plot.as == "jpeg"){
grDevices::jpeg(width=4000,height=3500,units="px",res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - Mean shape", ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif"){
grDevices::tiff(width=4000, height=3500, units="px", res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - Mean shape",".tif", sep=""))} # uncompressed images
} # end plot.exp=TRUE
# Mean
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(mean.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab, main="Mean shape", clab=expression('Amplitude'),
colkey=colkey)
if(plot.exp==TRUE){grDevices::dev.off()}
}# end "mean" shape
else{stop('Invalid or misspelled PC argument. Please choose between "mean" (for mean shape configuration) or a number representing the intended Principal Component. See help(hypo.surf) for details.')}
} # end is.character
if(is.numeric(PC)){
PCmax <- PC*2
PCmin <- (PC*2)-1
# Principal Components Analysis (PCA) using point coordinates
PCA.out = stats::prcomp(geomorph::two.d.array(threeD.out))
# Acquisition of hypothetical shapes (codes adapted from geomorph::plotTangentSpace)
pcdata = PCA.out$x
p = dim(threeD.out)[1]
k = dim(threeD.out)[2]
shapes <- shape.names <- NULL
for (i in 1:ncol(pcdata)) {
pcaxis.min <- min(pcdata[, i])
pcaxis.max <- max(pcdata[, i])
pc.min <- pc.max <- rep(0, dim(pcdata)[2])
pc.min[i] <- pcaxis.min
pc.max[i] <- pcaxis.max
pc.min <- as.matrix(pc.min %*% (t(PCA.out$rotation))) +
as.vector(t(ref))
pc.max <- as.matrix(pc.max %*% (t(PCA.out$rotation))) +
as.vector(t(ref))
shapes <- rbind(shapes, pc.min, pc.max)
shape.names <- c(shape.names, paste("PC", i, "min", sep = ""),
paste("PC", i, "max", sep = ""))
}
shapes <- geomorph::arrayspecs(shapes, p, k)
shapes <- lapply(seq(dim(shapes)[3]), function(x) shapes[, , x])
names(shapes) <- shape.names
if(PC > (length(shapes)/2)){
stop('Invalid number of Principal Components')}
# Transform calculated PC into matrix of amplitude values
min.hPC <- matrix(shapes[[PCmin]][,3], nrow=y.length, ncol=x.length, byrow = T)
max.hPC <- matrix(shapes[[PCmax]][,3], nrow=y.length, ncol=x.length, byrow = T)
# Hypothetical sound surfaces for desired Principal Component
if(plot.exp==TRUE){
if(plot.as == "jpeg"){
grDevices::jpeg(width=8000,height=3500,units="px",res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - PC", PC, ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif"){
grDevices::tiff(width=8000, height=3500, units="px", res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - PC", PC,".tif", sep=""))} # uncompressed images
} # end plot.exp=TRUE
graphics::par(mfrow=c(1,2), mar=c(0,2,3,1))
# Minimum
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(min.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab,
clab=expression('Amplitude'), main=paste("PC", PC, " - Minimum", sep=""),
colkey=colkey)
# Maximum
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(max.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab,
clab=expression('Amplitude'), main=paste("PC", PC, " - Maximum", sep=""),
colkey=colkey)
if(plot.exp==TRUE){grDevices::dev.off()}
} # end is.numeric
}
# Minimum and maximum deformations - Principal Component 1
hypo.surf(eig.sample, PC=1, flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47)
graphics::par(mfrow=c(1,2), mar=c(0,2,2,2))
hypo.surf <- function(threeD.out=NULL, PC=1, flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47, log.scale=TRUE, f=44100, wl=512, ovlp=70, plot.exp=FALSE, plot.as="jpeg", store.at = getwd(), rotate.Xaxis=60, rotate.Yaxis=40, cex.axis=0.5, cex.lab=0.9, cex.main=1.1, lwd=0.1, xlab="Time", ylab="Frequency", zlab="Amplitude", colkey = list(plot = TRUE, cex.clab = 0.9, cex.axis = 0.8, side = 4, length = 0.7, width = 0.7, labels = TRUE, tick = TRUE, lty = 1, lwd = 1, lwd.ticks = 1))
{
if(is.null(threeD.out))
{stop('Please define threeD.out as an object containing the output of eigensound function with analysis.type="threeDshape')}
if(is.null(PC))
{stop('Choose a Principal Component or "mean" shape configuration to generate hypothetical semilandmark configurations. See help(hypo.surf) for details.')}
ref = geomorph::mshape(threeD.out)
# Use sample as reference for hypothetical surfaces
#data("cuvieri")
# Acquire spectrogram values
e <- seewave::spectro(SoundShape::cuvieri, f=f, wl=wl, ovlp=ovlp, flim=flim, tlim=tlim, plot=F)
# Create new sequences representing the sampling grid
freq.seq <- seq(1, length(e$freq), length=y.length)
ifelse(isTRUE(log.scale),
time.seq <- 10^(seq(log10(1), log10(length(e$time)), length.out = x.length)),#log
time.seq <- seq(1, length(e$time), length.out = x.length)) # linear scale
# Subset original coordinates using new sequences
time.sub <- e$time[time.seq]
freq.sub <- e$freq[freq.seq]
# Mean (consensus) shape configuration
if(is.character(PC)){
if(PC=="mean"){
mean.hPC <- matrix(ref[,3], nrow=y.length, ncol=x.length, byrow = T)
# Export plot
if(plot.exp==TRUE){
if(plot.as == "jpeg"){
grDevices::jpeg(width=4000,height=3500,units="px",res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - Mean shape", ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif"){
grDevices::tiff(width=4000, height=3500, units="px", res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - Mean shape",".tif", sep=""))} # uncompressed images
} # end plot.exp=TRUE
# Mean
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(mean.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab, main="Mean shape", clab=expression('Amplitude'),
colkey=colkey)
if(plot.exp==TRUE){grDevices::dev.off()}
}# end "mean" shape
else{stop('Invalid or misspelled PC argument. Please choose between "mean" (for mean shape configuration) or a number representing the intended Principal Component. See help(hypo.surf) for details.')}
} # end is.character
if(is.numeric(PC)){
PCmax <- PC*2
PCmin <- (PC*2)-1
# Principal Components Analysis (PCA) using point coordinates
PCA.out = stats::prcomp(geomorph::two.d.array(threeD.out))
# Acquisition of hypothetical shapes (codes adapted from geomorph::plotTangentSpace)
pcdata = PCA.out$x
p = dim(threeD.out)[1]
k = dim(threeD.out)[2]
shapes <- shape.names <- NULL
for (i in 1:ncol(pcdata)) {
pcaxis.min <- min(pcdata[, i])
pcaxis.max <- max(pcdata[, i])
pc.min <- pc.max <- rep(0, dim(pcdata)[2])
pc.min[i] <- pcaxis.min
pc.max[i] <- pcaxis.max
pc.min <- as.matrix(pc.min %*% (t(PCA.out$rotation))) +
as.vector(t(ref))
pc.max <- as.matrix(pc.max %*% (t(PCA.out$rotation))) +
as.vector(t(ref))
shapes <- rbind(shapes, pc.min, pc.max)
shape.names <- c(shape.names, paste("PC", i, "min", sep = ""),
paste("PC", i, "max", sep = ""))
}
shapes <- geomorph::arrayspecs(shapes, p, k)
shapes <- lapply(seq(dim(shapes)[3]), function(x) shapes[, , x])
names(shapes) <- shape.names
if(PC > (length(shapes)/2)){
stop('Invalid number of Principal Components')}
# Transform calculated PC into matrix of amplitude values
min.hPC <- matrix(shapes[[PCmin]][,3], nrow=y.length, ncol=x.length, byrow = T)
max.hPC <- matrix(shapes[[PCmax]][,3], nrow=y.length, ncol=x.length, byrow = T)
# Hypothetical sound surfaces for desired Principal Component
if(plot.exp==TRUE){
if(plot.as == "jpeg"){
grDevices::jpeg(width=8000,height=3500,units="px",res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - PC", PC, ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif"){
grDevices::tiff(width=8000, height=3500, units="px", res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - PC", PC,".tif", sep=""))} # uncompressed images
} # end plot.exp=TRUE
graphics::par(mfrow=c(1,2), mar=c(0,2,2,2))
# Minimum
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(min.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab,
clab=expression('Amplitude'), main=paste("PC", PC, " - Minimum", sep=""),
colkey=colkey)
# Maximum
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(max.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab,
clab=expression('Amplitude'), main=paste("PC", PC, " - Maximum", sep=""),
colkey=colkey)
if(plot.exp==TRUE){grDevices::dev.off()}
} # end is.numeric
}
# Minimum and maximum deformations - Principal Component 1
hypo.surf(eig.sample, PC=1, flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47)
hypo.surf <- function(threeD.out=NULL, PC=1, flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47, log.scale=TRUE, f=44100, wl=512, ovlp=70, plot.exp=FALSE, plot.as="jpeg", store.at = getwd(), rotate.Xaxis=60, rotate.Yaxis=40, cex.axis=0.5, cex.lab=0.9, cex.main=1.1, lwd=0.1, xlab="Time", ylab="Frequency", zlab="Amplitude", colkey = list(plot = TRUE, cex.clab = 0.9, cex.axis = 0.8, side = 4, length = 0.6, width = 0.7, labels = TRUE, tick = TRUE, lty = 1, lwd = 1, lwd.ticks = 1))
{
if(is.null(threeD.out))
{stop('Please define threeD.out as an object containing the output of eigensound function with analysis.type="threeDshape')}
if(is.null(PC))
{stop('Choose a Principal Component or "mean" shape configuration to generate hypothetical semilandmark configurations. See help(hypo.surf) for details.')}
ref = geomorph::mshape(threeD.out)
# Use sample as reference for hypothetical surfaces
#data("cuvieri")
# Acquire spectrogram values
e <- seewave::spectro(SoundShape::cuvieri, f=f, wl=wl, ovlp=ovlp, flim=flim, tlim=tlim, plot=F)
# Create new sequences representing the sampling grid
freq.seq <- seq(1, length(e$freq), length=y.length)
ifelse(isTRUE(log.scale),
time.seq <- 10^(seq(log10(1), log10(length(e$time)), length.out = x.length)),#log
time.seq <- seq(1, length(e$time), length.out = x.length)) # linear scale
# Subset original coordinates using new sequences
time.sub <- e$time[time.seq]
freq.sub <- e$freq[freq.seq]
# Mean (consensus) shape configuration
if(is.character(PC)){
if(PC=="mean"){
mean.hPC <- matrix(ref[,3], nrow=y.length, ncol=x.length, byrow = T)
# Export plot
if(plot.exp==TRUE){
if(plot.as == "jpeg"){
grDevices::jpeg(width=4000,height=3500,units="px",res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - Mean shape", ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif"){
grDevices::tiff(width=4000, height=3500, units="px", res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - Mean shape",".tif", sep=""))} # uncompressed images
} # end plot.exp=TRUE
# Mean
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(mean.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab, main="Mean shape", clab=expression('Amplitude'),
colkey=colkey)
if(plot.exp==TRUE){grDevices::dev.off()}
}# end "mean" shape
else{stop('Invalid or misspelled PC argument. Please choose between "mean" (for mean shape configuration) or a number representing the intended Principal Component. See help(hypo.surf) for details.')}
} # end is.character
if(is.numeric(PC)){
PCmax <- PC*2
PCmin <- (PC*2)-1
# Principal Components Analysis (PCA) using point coordinates
PCA.out = stats::prcomp(geomorph::two.d.array(threeD.out))
# Acquisition of hypothetical shapes (codes adapted from geomorph::plotTangentSpace)
pcdata = PCA.out$x
p = dim(threeD.out)[1]
k = dim(threeD.out)[2]
shapes <- shape.names <- NULL
for (i in 1:ncol(pcdata)) {
pcaxis.min <- min(pcdata[, i])
pcaxis.max <- max(pcdata[, i])
pc.min <- pc.max <- rep(0, dim(pcdata)[2])
pc.min[i] <- pcaxis.min
pc.max[i] <- pcaxis.max
pc.min <- as.matrix(pc.min %*% (t(PCA.out$rotation))) +
as.vector(t(ref))
pc.max <- as.matrix(pc.max %*% (t(PCA.out$rotation))) +
as.vector(t(ref))
shapes <- rbind(shapes, pc.min, pc.max)
shape.names <- c(shape.names, paste("PC", i, "min", sep = ""),
paste("PC", i, "max", sep = ""))
}
shapes <- geomorph::arrayspecs(shapes, p, k)
shapes <- lapply(seq(dim(shapes)[3]), function(x) shapes[, , x])
names(shapes) <- shape.names
if(PC > (length(shapes)/2)){
stop('Invalid number of Principal Components')}
# Transform calculated PC into matrix of amplitude values
min.hPC <- matrix(shapes[[PCmin]][,3], nrow=y.length, ncol=x.length, byrow = T)
max.hPC <- matrix(shapes[[PCmax]][,3], nrow=y.length, ncol=x.length, byrow = T)
# Hypothetical sound surfaces for desired Principal Component
if(plot.exp==TRUE){
if(plot.as == "jpeg"){
grDevices::jpeg(width=8000,height=3500,units="px",res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - PC", PC, ".jpg", sep=""))} # compressed images
if(plot.as=="tiff"|plot.as=="tif"){
grDevices::tiff(width=8000, height=3500, units="px", res=500,
filename=paste(store.at,"/", "Hypothetical surfaces - PC", PC,".tif", sep=""))} # uncompressed images
} # end plot.exp=TRUE
graphics::par(mfrow=c(1,2), mar=c(0,2,2,2))
# Minimum
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(min.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab,
clab=expression('Amplitude'), main=paste("PC", PC, " - Minimum", sep=""),
colkey=colkey)
# Maximum
plot3D::persp3D(x=time.sub, y=freq.sub, z=t(max.hPC), theta=rotate.Xaxis, phi=rotate.Yaxis, resfac=1, r=3,
expand=0.5, scale=T, axes=T, ticktype="detailed", nticks=4,
cex.axis=cex.axis, cex.lab=cex.lab, cex.main=cex.main,
border="black", lwd=lwd, col=seewave::spectro.colors(n=100),
xlab=xlab, ylab=ylab, zlab=zlab,
clab=expression('Amplitude'), main=paste("PC", PC, " - Maximum", sep=""),
colkey=colkey)
if(plot.exp==TRUE){grDevices::dev.off()}
} # end is.numeric
}
# Minimum and maximum deformations - Principal Component 2
hypo.surf(eig.sample, PC=2, flim=c(0, 4), tlim=c(0, 0.8), x.length=70, y.length=47)
??xlab
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# Check package
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
#check_win
#check_rhub
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# Check package
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
#check_win
#check_rhub
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# Check package
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
#check_win
#check_rhub
library(SoundShape)
library(roxygen2)
library(devtools)
#find_rtools()
#devtools::install_github("p-rocha/SoundShape")
# Clear environment prior to package
rm(list=ls())
# Define working directory where package will be created
setwd("C:/R")
# Create folder where package will be stored
#create("SoundShape")
# Process documentation (each function edited manually)
document("C:/R/SoundShape")
# Install package directly
install("C:/R/SoundShape")
# Build package
build("C:/R/SoundShape")
# Check package
#dir("C:/R", pattern="tar.gz")
check_built("C:/R/SoundShape_1.0.tar.gz")
#check_win
#check_rhub
